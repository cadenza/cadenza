<Type Name="Int32Rocks" FullName="Mono.Rocks.Int32Rocks">
  <TypeSignature Language="C#" Value="public static class Int32Rocks" />
  <AssemblyInfo>
    <AssemblyName>Mono.Rocks</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Extension methods for <see cref="T:System.Int32" />.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DownTo">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; DownTo (this int self, int limit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="System.Int32" RefType="this" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="self">
          An <see cref="T:System.Int32" /> containing the upper starting value.
        </param>
        <param name="limit">
          An <see cref="T:System.Int32" /> containing the lower ending value.
        </param>
        <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> down to
          <paramref name="limit" />, inclusive.
        </summary>
        <returns>
          An
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          with values between <paramref name="self" /> down to 
          <paramref name="limit" />, inclusive.
        </returns>
        <remarks>
          <para>
            This method is implemented by using deferred execution.
          </para>
          <block subset="none" type="note">
            No bounds checking is performed, so if <paramref name="limit" />
            is greater than <paramref name="self" />, then
            <c>(<see cref="F:System.Int32.MaxValue" /> - 
            <paramref name="self" /> - <paramref name="limit" />)</c> 
            values will be returned.
          </block>
        </remarks>
        <example>
          <para>
            The following example demonstrates use of 
            <see cref="M:Mono.Rocks.Int32Rocks.DownTo(System.Int32,System.Int32)" />:
          </para>
          <code lang="C#">
Console.WriteLine (5.DownTo (0).Implode (", "));
    // Prints "5, 4, 3, 2, 1, 0"</code>
        </example>
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public static bool IsEven (this int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">
          A <see cref="T:System.Int32" /> containing the value to check.
        </param>
        <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an even number;
          otherwise, <see langword="false" />.
        </returns>
        <remarks>
          <para>
            For purposes of this method, an even value is a number
            evenly divisible by 2 and the number 0; all other numbers
            are odd.
          </para>
        </remarks>
        <altmember cref="M:Mono.Rocks.Int32Rocks.IsOdd(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public static bool IsOdd (this int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">
          A <see cref="T:System.Int32" /> containing the value to check.
        </param>
        <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an odd number;
          otherwise, <see langword="false" />.
        </returns>
        <remarks>
          <para>
            For purposes of this method, an even value is a number
            evenly divisible by 2 and the number 0; all other numbers
            are odd.
          </para>
        </remarks>
        <altmember cref="M:Mono.Rocks.Int32Rocks.IsEven(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Step">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Step (this int self, int limit, int step);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="System.Int32" RefType="this" />
        <Parameter Name="limit" Type="System.Int32" />
        <Parameter Name="step" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="self">
          An <see cref="T:System.Int32" /> containing the lower starting value.
        </param>
        <param name="limit">
          An <see cref="T:System.Int32" /> containing the upper ending value.
        </param>
        <param name="step">
          An <see cref="T:System.In32" /> containing the value to increment
          by.
        </param>
        <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> up to
          <paramref name="limit" />, inclusive, incrementing by 
          <paramref name="step" /> between each value.
        </summary>
        <returns>
          An
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          with values between <paramref name="self" /> up to 
          <paramref name="limit" />, inclusive.
        </returns>
        <remarks>
          <para>
            This method is implemented by using deferred execution.
          </para>
          <block subset="none" type="note">
            No bounds checking is performed, so if <paramref name="limit" />
            is less than <paramref name="self" />, then
            <c>((<see cref="F:System.Int32.MaxValue" /> - 
            <paramref name="self" /> - <paramref name="limit" />) /
            <paramref name="step" />)</c> values will be returned.
          </block>
        </remarks>
        <example>
          <para>
            The following example demonstrates use of 
            <see cref="M:Mono.Rocks.Int32Rocks.Step(System.Int32,System.Int32,System.Int32)" />:
          </para>
          <code lang="C#">
Console.WriteLine (1.Step(9, 2).Implode (", "));
    // Prints "1, 3, 5, 7, 9"</code>
        </example>
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </Member>
    <Member MemberName="Times">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Times (this int self);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="System.Int32" RefType="this" />
      </Parameters>
      <Docs>
        <param name="self">
          An <see cref="T:System.Int32" /> containing the positive upper limit.
        </param>
        <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values between <c>0</c> and 
          <paramref name="self" />, exclusive.
        </summary>
        <returns>
          An
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          with values between <c>0</c> up to <paramref name="self" /> 
          exclusive.
        </returns>
        <remarks>
          <para>
            This method is implemented by using deferred execution.
          </para>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="self" /> is less than <c>0</c>.
        </exception>
        <example>
          <para>
            The following example demonstrates use of 
            <see cref="M:Mono.Rocks.Int32Rocks.Times(System.Int32)" />:
          </para>
          <code lang="C#">
Console.WriteLine (6.Times ().Implode (", "));
    // Prints "0, 1, 2, 3, 4, 5"</code>
        </example>
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </Member>
    <Member MemberName="UpTo">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; UpTo (this int self, int limit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="self" Type="System.Int32" RefType="this" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="self">
          An <see cref="T:System.Int32" /> containing the lower starting value.
        </param>
        <param name="limit">
          An <see cref="T:System.Int32" /> containing the upper ending value.
        </param>
        <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> up to
          <paramref name="limit" />, inclusive.
        </summary>
        <returns>
          An
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          with values between <paramref name="self" /> up to 
          <paramref name="limit" />, inclusive.
        </returns>
        <remarks>
          <para>
            This method is implemented by using deferred execution.
          </para>
          <block subset="none" type="note">
            No bounds checking is performed, so if <paramref name="limit" />
            is less than than <paramref name="self" />, then
            <c>(<see cref="F:System.Int32.MaxValue" /> - 
            <paramref name="self" /> - <paramref name="limit" />)</c> 
            values will be returned.
          </block>
        </remarks>
        <example>
          <para>
            The following example demonstrates use of 
            <see cref="M:Mono.Rocks.Int32Rocks.UpTo(System.Int32,System.Int32)" />:
          </para>
          <code lang="C#">
Console.WriteLine (6.UpTo (12).Implode (", "));
    // Prints "6, 7, 8, 9, 10, 11, 12"</code>
        </example>
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
        <altmember cref="M:Mono.Rocks.IEnumerableRocks.Apply``1(System.Collections.Generic.IEnumerable{``0})" />
      </Docs>
    </Member>
  </Members>
</Type>
