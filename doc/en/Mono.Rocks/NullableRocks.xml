<Type Name="NullableRocks" FullName="Mono.Rocks.NullableRocks">
  <TypeSignature Language="C#" Value="public static class NullableRocks" />
  <AssemblyInfo>
    <AssemblyName>Mono.Rocks</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.Extension</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      Extension and utility methods for <see cref="T:System.Nullable{T}" />.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Just&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Mono.Rocks.Maybe&lt;T&gt; Just&lt;T&gt; (this Nullable&lt;T&gt; self) where T : struct;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Extension</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Mono.Rocks.Maybe&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="System.Nullable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          The type to convert into a <see cref="T:Mono.Rocks.Maybe{T}" />.
        </typeparam>
        <param name="self">
          A value of type <see cref="T:System.Nullable{T}" /> to convert into a 
          <see cref="T:Mono.Rocks.Maybe{T}" />.
        </param>
        <summary>
          Create a new <see cref="T:Mono.Rocks.Maybe{T}" /> instance
          initialized to a specified value.  The returned value will not be 
          <see cref="F:Mono.Rocks.Maybe{T}.Nothing" />.
        </summary>
        <returns>
          <para>
            A new <see cref="T:Mono.Rocks.Maybe{T}" /> instance
            initialized to a specified value.
          </para>
          <para>
            The returned value will not be 
            <see cref="F:Mono.Rocks.Maybe{T}.Nothing" />.
          </para>
        </returns>
        <remarks>
          <para>
            Use this method when you want to ensure that 
            <see cref="T:Mono.Rocks.Maybe{T}" /> instance is created in which
						<see cref="P:Mono.Rocks.Maybe{T}.Value" /> will not throw.
          </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="self" />s <see cref="P:System.Nullable{T}.HasValue" />
					property is <see langword="false" />.
        </exception>
        <altmember cref="M:Mono.Rocks.ObjectRocks.ToMaybe``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ToMaybe&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Mono.Rocks.Maybe&lt;T&gt; ToMaybe&lt;T&gt; (this Nullable&lt;T&gt; self) where T : struct;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Extension</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Mono.Rocks.Maybe&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="System.Nullable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          The type to convert into a <see cref="T:Mono.Rocks.Maybe{T}" />.
        </typeparam>
        <param name="self">
          A value of type <see cref="T:System.Nullable{T}" /> to convert into a 
          <see cref="T:Mono.Rocks.Maybe{T}" />.
        </param>
        <summary>
          Create a new <see cref="T:Mono.Rocks.Maybe{T}" /> instance
          initialized to a specified value.  The returned value may be 
          <see cref="F:Mono.Rocks.Maybe{T}.Nothing" />.
        </summary>
        <returns>
          <para>
            A new <see cref="T:Mono.Rocks.Maybe{T}" /> instance
            initialized to a specified value.
          </para>
          <block subset="none" type="note">
            The value returned may be 
            <see cref="F:Mono.Rocks.Maybe{T}.Nothing" />.
          </block>
        </returns>
        <remarks>
          <para>
            Use this method when you want to ensure that a possibly invalid
            <see cref="T:Mono.Rocks.Maybe{T}" /> instance is created.
						if <see cref="T:System.Nullable{T}.HasValue" /> is 
						<see langword="false" />, then
            <see cref="F:Mono.Rocks.Maybe{T}.Nothing" /> will be returned;
            otherwise, a new <see cref="T:Mono.Rocks.Maybe{T}" /> will be
            created containing the value within <paramref name="self" />.
          </para>
        </remarks>
        <altmember cref="M:Mono.Rocks.NullableRocks.Just``1(``0)" />
      </Docs>
    </Member>
  </Members>
</Type>
