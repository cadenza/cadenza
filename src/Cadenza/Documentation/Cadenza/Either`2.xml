<Type Name="Either&lt;T1,T2&gt;" FullName="Cadenza.Either&lt;T1,T2&gt;">
  <TypeSignature Language="C#" Value="public abstract class Either&lt;T1,T2&gt; : IEquatable&lt;Cadenza.Either&lt;T1,T2&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>Cadenza</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;Cadenza.Either&lt;T1,T2&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">
            The first value type.
            </typeparam>
    <typeparam name="T2">
            The second value type.
            </typeparam>
    <summary>
            A union of 2 values.
            </summary>
    <remarks>
      <para>
            An <c>Either</c> is an immutable, strongly typed union of variously
            typed values with each value lacking an otherwise meaningful name aside
            from its position, which is not exposed.  It stores only one (non-null)
            value from a set of types (as determined by the type parameter list).
            </para>
      <para>
            The value held by a <see cref="T:Cadenza.Either{T1,T2}" /> instance
            can be converted into a value by using the
            <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" /> method.
            <c>Fold</c> takes a list of delegates to perform the conversion; the
            delegate used to perform the conversion is based upon the internal
            position of the value stored.
            </para>
      <para>
        <c>Either</c> instances are created through one of the following
            creation methods:
            </para>
      <list type="bullet">
        <item>
          <term>
            <see cref="M:Cadenza.Either{T1,T2}.A(`0)" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:Cadenza.Either{T1,T2}.op_Implicit(`0)~Cadenza.Either{`0,`1}" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:Cadenza.Either{T1,T2}.B(`1)" />
          </term>
        </item>
        <item>
          <term>
            <see cref="M:Cadenza.Either{T1,T2}.op_Implicit(`1)~Cadenza.Either{`0,`1}" />
          </term>
        </item>
      </list>
      <code lang="C#">
            var a = Either&lt;double, string&gt;.A (Math.PI);   // value stored in 1st position
            int r = a.Fold (
            v =&gt; (int) v,                                 // 1st position converter
            v =&gt; v.Length);                               // 2nd position converter
            Console.WriteLine (r);                        // prints 3
            // alternatively...
            Either&lt;double, string&gt; b = "value";           // value stored in 2nd position
            Console.WriteLine (b.Fold (v =&gt; v.ToString(), v =&gt; v));
            // prints "value"</code>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="A">
      <MemberSignature Language="C#" Value="public static Cadenza.Either&lt;T1,T2&gt; A (T1 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Either&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T1" />
      </Parameters>
      <Docs>
        <param name="value">
            A <typeparamref name="T1" /> containing the value
            to provide to the first
            <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
            delegate.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
            holds a <typeparamref name="T1" /> value.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Either{T1,T2}" /> instance which holds a
            holds a <typeparamref name="T1" /> value.
            </returns>
        <remarks>
          <para>
            When
            <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
            is invoked,
            the returned <see cref="T:Cadenza.Either{T1,T2}" /> instance
            will invoke the first delegate
            for conversions.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="value" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="B">
      <MemberSignature Language="C#" Value="public static Cadenza.Either&lt;T1,T2&gt; B (T2 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Either&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T2" />
      </Parameters>
      <Docs>
        <param name="value">
            A <typeparamref name="T2" /> containing the value
            to provide to the second
            <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
            delegate.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Either{T1,T2}" /> instance which
            holds a <typeparamref name="T2" /> value.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Either{T1,T2}" /> instance which holds a
            holds a <typeparamref name="T2" /> value.
            </returns>
        <remarks>
          <para>
            When
            <see cref="M:Cadenza.Either{T1,T2}.Fold``1(System.Func{`0,``0},System.Func{`1,``0})" />
            is invoked,
            the returned <see cref="T:Cadenza.Either{T1,T2}" /> instance
            will invoke the second delegate
            for conversions.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="value" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (Cadenza.Either&lt;T1,T2&gt; obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Cadenza.Either&lt;T1,T2&gt;" />
      </Parameters>
      <Docs>
        <param name="obj">
            A <see cref="T:Cadenza.Either{T1,T2}" />to compare this instance against.
            </param>
        <summary>
            Determines whether the current instance and the specified <see cref="T:Cadenza.Either{T1,T2}" /> have the same value.
            </summary>
        <returns>
          <para>
            <see langword="true" /> if each member of <paramref name="obj" />
            and the current instance have the same value (according to
            <see cref="M:System.Object.Equals(System.Object)" />); otherwise
            <see langword="false" /> is returned.
            </para>
        </returns>
        <remarks>
          <para>
            This method checks for value equality
            (<see cref="M:System.Object.Equals(System.Object)" />), as defined by each
            value type.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (object obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
            A <see cref="T:System.Object" /> to compare this instance against.
            </param>
        <summary>
            Determines whether the current instance and the specified object have the same value.
            </summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="obj" /> is a
            <see cref="T:Cadenza.Either{T1,T2}" /> and each member of <paramref name="obj" />
            and the current instance have the same value (according to
            <see cref="M:System.Object.Equals(System.Object)" />); otherwise
            <see langword="false" /> is returned.
            </para>
        </returns>
        <remarks>
          <para>
            This method checks for value equality
            (<see cref="M:System.Object.Equals(System.Object)" />), as defined by each
            value type.
            </para>
          <para>
            <block subset="none" type="note">
            This method overrides <see cref="M:System.Object.Equals(System.Object)" />.
            </block>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fold&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Fold&lt;TResult&gt; (Func&lt;T1,TResult&gt; a, Func&lt;T2,TResult&gt; b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="System.Func&lt;T1,TResult&gt;" />
        <Parameter Name="b" Type="System.Func&lt;T2,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
            The type to convert the <see cref="T:Cadenza.Either{T1,T2}" /> to.
            </typeparam>
        <param name="a">
            A <see cref="T:System.Func{T1,TResult}" />
            used if the <see cref="T:Cadenza.Either{T1,T2}" /> stores a
            <typeparamref name="T1" /> value into a
            <typeparamref name="TResult" /> value.
            </param>
        <param name="b">
            A <see cref="T:System.Func{T2,TResult}" />
            used if the <see cref="T:Cadenza.Either{T1,T2}" /> stores a
            <typeparamref name="T2" /> value into a
            <typeparamref name="TResult" /> value.
            </param>
        <summary>
            Converts a <see cref="T:Cadenza.Either{T1,T2}" /> into a <typeparamref name="TResult" /> value.
            </summary>
        <returns>
            A <typeparamref name="TResult" /> as generated by one
            of the conversion delegate parameters.
            </returns>
        <remarks>
          <para>
            Converts a <see cref="T:Cadenza.Either{T1,T2}" /> into a <typeparamref name="TResult" />
            by invoking one of the provided delegate parameters.
            </para>
          <para>
            The parameter which is invoked is predicated upon the internal position of
            the value held.  For example, if the internal value is in the first position
            (i.e. <see cref="M:Cadenza.Either{T1,T2}.A(`0)" />
            was used to create the <see cref="T:Cadenza.Either{T1,T2}" /> instance), then
            <paramref name="a" /> (the first delegate parameter) will be invoked to
            convert the <typeparamref name="T1" /> into a
            <typeparamref name="TResult" />.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="a" /> is <see langword="null" />.
            </para>
          <para>-or-</para>
          <para>
            <paramref name="b" /> is <see langword="null" />.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Generates a hash code for the current instance.
            </summary>
        <returns>
            A <see cref="T:System.Int32" /> containing the hash code for this instance.
            </returns>
        <remarks>
          <para>
            <block subset="none" type="note">
            This method overrides <see cref="M:System.Object.GetHashCode" />.
            </block>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static Cadenza.Either&lt;T1,T2&gt; op_Implicit (T1 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Either&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static Cadenza.Either&lt;T1,T2&gt; op_Implicit (T2 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Either&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T2" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
