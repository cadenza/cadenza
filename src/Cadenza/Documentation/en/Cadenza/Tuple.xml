<Type Name="Tuple" FullName="Cadenza.Tuple">
  <TypeSignature Language="C#" Value="public static class Tuple" />
  <AssemblyInfo>
    <AssemblyName>Cadenza</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Utility methods to create Tuple instances.
            </summary>
    <remarks>
      <para>
            Provides a set of <see cref="M:Cadenza.Tuple.Create" /> methods so that
            C# type inferencing can easily be used with tuples.  For example,
            instead of:
            </para>
      <code lang="C#">
            Tuple&lt;int, long&gt; a = new Tuple&lt;int, long&gt; (1, 2L);</code>
      <para>You can instead write:</para>
      <code lang="C#">
            Tuple&lt;int, long&gt; b = Tuple.Create (1, 2L);
            // or
            var              c = Tuple.Create (1, 2L);</code>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Create&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;T&gt; Create&lt;T&gt; (T item1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Tuple&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The first <see cref="T:Cadenza.Tuple{T}" /> value type.
            </typeparam>
        <param name="item1">
            The first <see cref="T:Cadenza.Tuple{T}" /> value.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Tuple{T}" />.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Tuple{T}" /> initialized with the parameter values.
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="C:Cadenza.Tuple{T}(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;T1,T2&gt; Create&lt;T1,T2&gt; (T1 item1, T2 item2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Tuple&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            The first <see cref="T:Cadenza.Tuple{T1,T2}" /> value type.
            </typeparam>
        <typeparam name="T2">
            The second <see cref="T:Cadenza.Tuple{T1,T2}" /> value type.
            </typeparam>
        <param name="item1">
            The first <see cref="T:Cadenza.Tuple{T1,T2}" /> value.
            </param>
        <param name="item2">
            The second <see cref="T:Cadenza.Tuple{T1,T2}" /> value.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Tuple{T1,T2}" />.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Tuple{T1,T2}" /> initialized with the parameter values.
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="C:Cadenza.Tuple{T1,T2}(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;T1,T2,T3&gt; Create&lt;T1,T2,T3&gt; (T1 item1, T2 item2, T3 item3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Tuple&lt;T1,T2,T3&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            The first <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value type.
            </typeparam>
        <typeparam name="T2">
            The second <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value type.
            </typeparam>
        <typeparam name="T3">
            The third <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value type.
            </typeparam>
        <param name="item1">
            The first <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value.
            </param>
        <param name="item2">
            The second <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value.
            </param>
        <param name="item3">
            The third <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> value.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Tuple{T1,T2,T3}" />.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> initialized with the parameter values.
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="C:Cadenza.Tuple{T1,T2,T3}(`0,`1,`2)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;T1,T2,T3,T4&gt; Create&lt;T1,T2,T3,T4&gt; (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Cadenza.Tuple&lt;T1,T2,T3,T4&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            The first <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value type.
            </typeparam>
        <typeparam name="T2">
            The second <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value type.
            </typeparam>
        <typeparam name="T3">
            The third <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value type.
            </typeparam>
        <typeparam name="T4">
            The fourth <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value type.
            </typeparam>
        <param name="item1">
            The first <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value.
            </param>
        <param name="item2">
            The second <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value.
            </param>
        <param name="item3">
            The third <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value.
            </param>
        <param name="item4">
            The fourth <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> value.
            </param>
        <summary>
            Creates a <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" />.
            </summary>
        <returns>
            A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> initialized with the parameter values.
            </returns>
        <remarks>To be added.</remarks>
        <altmember cref="C:Cadenza.Tuple{T1,T2,T3,T4}(`0,`1,`2,`3)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValues">
      <MemberSignature Language="C#" Value="public static int MaxValues { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The maximum number of Tuple types provided.
            </summary>
        <value>
            The maximum number of Tuple types provided.
            </value>
        <remarks>
          <para>
            Only tuples up to a certain "arity" are supported; for example,
            a <c>Tuple&lt;T1, T2, ..., T100&gt;</c> isn't supported (and won't
            likely ever be).
            </para>
          <para>
            <see cref="P:Cadenza.Tuple.MaxValues" /> is the maximum number of
            values that the Tuple types support.  If you need to support
            more values, then you need to either live with potential boxing
            and use a e.g. <see cref="T:System.Collections.Generic.List{System.Object}" />
            or nest Tuple instantiations, e.g.
            <c>Tuple&lt;int, Tuple&lt;int, Tuple&lt;int, Tuple&lt;int, int&gt;&gt;&gt;&gt;</c>.
            The problem with such nesting is that it becomes "unnatural" to access
            later elements -- <c>t._2._2._2._2</c> to access the fifth value for
            the previous example.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
