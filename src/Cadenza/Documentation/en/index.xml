<Overview>
  <Assemblies>
    <Assembly Name="Cadenza" Version="0.1.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations | System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints | System.Diagnostics.DebuggableAttribute+DebuggingModes.EnableEditAndContinue)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Novell, Inc.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright Â© 2007 Novell, Inc. and contributors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("A useful extension methods collection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.1.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Mono")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Cadenza")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("098c331b-2893-4367-8d3a-4a350ef2e9bb")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>
    <see cref="N:Cadenza" /> is a collection of types and extension methods
    to make your life easier.
  </Remarks>
  <Copyright>
    2008 Novell, Inc. and contributors.
  </Copyright>
  <Types>
    <Namespace Name="Cadenza">
      <Type Name="DelegateCoda" Kind="Class" />
      <Type Name="Either" Kind="Class" />
      <Type Name="Either`2" DisplayName="Either&lt;T1,T2&gt;" Kind="Class" />
      <Type Name="Either`3" DisplayName="Either&lt;T1,T2,T3&gt;" Kind="Class" />
      <Type Name="Either`4" DisplayName="Either&lt;T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="Int16Coda" Kind="Class" />
      <Type Name="Int32Coda" Kind="Class" />
      <Type Name="Int64Coda" Kind="Class" />
      <Type Name="JaggedArrayCoda" Kind="Class" />
      <Type Name="Lambda" Kind="Class" />
      <Type Name="Maybe" Kind="Class" />
      <Type Name="Maybe`1" DisplayName="Maybe&lt;T&gt;" Kind="Structure" />
      <Type Name="MaybeCoda" Kind="Class" />
      <Type Name="NaturalStringComparer" Kind="Class" />
      <Type Name="NullableCoda" Kind="Class" />
      <Type Name="ObjectCoda" Kind="Class" />
      <Type Name="RectangularArrayCoda" Kind="Class" />
      <Type Name="Sequence" Kind="Class" />
      <Type Name="StringCoda" Kind="Class" />
      <Type Name="Tuple" Kind="Class" />
      <Type Name="Tuple`1" DisplayName="Tuple&lt;T&gt;" Kind="Class" />
      <Type Name="Tuple`2" DisplayName="Tuple&lt;T1,T2&gt;" Kind="Class" />
      <Type Name="Tuple`3" DisplayName="Tuple&lt;T1,T2,T3&gt;" Kind="Class" />
      <Type Name="Tuple`4" DisplayName="Tuple&lt;T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="TupleCoda" Kind="Class" />
      <Type Name="TypeCoda" Kind="Class" />
      <Type Name="UInt16Coda" Kind="Class" />
      <Type Name="UInt32Coda" Kind="Class" />
      <Type Name="UInt64Coda" Kind="Class" />
    </Namespace>
    <Namespace Name="Cadenza.Collections">
      <Type Name="BidirectionalDictionary`2" DisplayName="BidirectionalDictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="CachedSequence`1" DisplayName="CachedSequence&lt;T&gt;" Kind="Class" />
      <Type Name="EnumerableCoda" Kind="Class" />
      <Type Name="KeyValuePairCoda" Kind="Class" />
      <Type Name="LinkedListCoda" Kind="Class" />
      <Type Name="MutableLookup`2" DisplayName="MutableLookup&lt;TKey,TElement&gt;" Kind="Class" />
      <Type Name="OrderedDictionary`2" DisplayName="OrderedDictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ReadOnlyDictionary`2" DisplayName="ReadOnlyDictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="SequenceComparison`1" DisplayName="SequenceComparison&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Cadenza.ComponentModel">
      <Type Name="NotifyingProperty" Kind="Class" />
      <Type Name="NotifyingProperty`1" DisplayName="NotifyingProperty&lt;TValue&gt;" Kind="Structure" />
    </Namespace>
    <Namespace Name="Cadenza.IO">
      <Type Name="EnumerableValueReader`1" DisplayName="EnumerableValueReader&lt;T&gt;" Kind="Class" />
      <Type Name="IValueReader" Kind="Interface" />
      <Type Name="IValueWriter" Kind="Interface" />
      <Type Name="StreamCoda" Kind="Class" />
      <Type Name="StreamConverter" Kind="Class" />
      <Type Name="StreamConverterCoda" Kind="Class" />
      <Type Name="TextReaderCoda" Kind="Class" />
      <Type Name="TextReaderCodaOptions" Kind="Enumeration" />
      <Type Name="TextValueReader" Kind="Class" />
      <Type Name="ValueReader`1" DisplayName="ValueReader&lt;T&gt;" Kind="Class" />
      <Type Name="ValueReaderCoda" Kind="Class" />
    </Namespace>
    <Namespace Name="Cadenza.Reflection">
      <Type Name="CustomAttributeProviderCoda" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Cadenza</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateHistory&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AggregateHistory&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateHistory``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateHistory&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TAccumulate&gt; AggregateHistory&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TAccumulate&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateHistory``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateHistory&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; AggregateHistory&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateHistory``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource AggregateReverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverse&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate AggregateReverse&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverse``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverse&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult AggregateReverse&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverse``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverseHistory&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AggregateReverseHistory&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverseHistory``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverseHistory&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TAccumulate&gt; AggregateReverseHistory&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TAccumulate&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverseHistory``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AggregateReverseHistory&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; AggregateReverseHistory&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AggregateReverseHistory``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="And">
        <MemberSignature Language="C#" Value="public static bool And (this System.Collections.Generic.IEnumerable&lt;bool&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.Boolean&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.And(System.Collections.Generic.IEnumerable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Apply&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void Apply&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Apply``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ApplyPairs&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; ApplyPairs&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Action&lt;TSource&gt;[] actions);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="actions" Type="System.Action&lt;TSource&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="actions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ApplyPairs``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsIList&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TSource&gt; AsIList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IList&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.AsIList``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Break&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Break&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Break``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Cache&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Collections.CachedSequence&lt;T&gt; Cache&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Collections.CachedSequence&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Cache``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="CompareWith&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Collections.SequenceComparison&lt;T&gt; CompareWith&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; self, System.Collections.Generic.IEnumerable&lt;T&gt; update);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Collections.SequenceComparison&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="update" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the elements within <paramref name="self" /> and <paramref name="update" /></typeparam>
          <param name="self">The original enumeration of elements.</param>
          <param name="update">The updated enumeration of elements to compare against.</param>
          <summary>Compares two enumerations retrieving added, removed and unchanged elements.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.CompareWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="CompareWith&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Collections.SequenceComparison&lt;T&gt; CompareWith&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; self, System.Collections.Generic.IEnumerable&lt;T&gt; update, System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Collections.SequenceComparison&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="update" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the elements within <paramref name="self" /> and <paramref name="update" /></typeparam>
          <param name="self">The original enumeration of elements.</param>
          <param name="update">The updated enumeration of elements to compare against.</param>
          <param name="comparer">The <see cref="System.Collections.Generic.IEqualityComparer{T}" /> used to compare equality.</param>
          <summary>Compares two enumerations retrieving added, removed and unchanged elements.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.CompareWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt;[] selfs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selfs" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="selfs">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; selfs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selfs" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="selfs">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ContiguousSubsequences&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; ContiguousSubsequences&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, int windowSize);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="windowSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="windowSize">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ContiguousSubsequences``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Cycle&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Cycle&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Cycle``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Each&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Each&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Action&lt;TSource,int&gt; action);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Each&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Each&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Action&lt;TSource&gt; action);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ExceptLast&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; ExceptLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ExceptLast``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ExceptLast&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; ExceptLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ExceptLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FindIndex&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int FindIndex&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FindIndices&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; FindIndices&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.FindIndices``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ForEach&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void ForEach&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Action&lt;TSource,int&gt; action);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ForEach&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void ForEach&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Action&lt;TSource&gt; action);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="HaskellGroup&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; HaskellGroup&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.HaskellGroup``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="HaskellGroupBy&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; HaskellGroupBy&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TSource,bool&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the elements to turn into groups.
        </param>
          <param name="func">
          A <see cref="T:System.Func{TSource,TSource,System.Boolean}" /> which is
          used to determine whether the <typeparamref name="TSource" /> 
          elements belong to the same group.
        </param>
          <summary>
          Split <paramref name="self" /> into a sequence of groups.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.HaskellGroupBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Implode&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static string Implode&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Implode``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Implode&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static string Implode&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, string separator);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="separator">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Implode``1(System.Collections.Generic.IEnumerable{``0},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Implode&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static string Implode&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, string separator, Func&lt;TSource,string&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="separator">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Implode``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOf&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOf&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOfAny&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource[] values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="values" Type="TSource[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="values">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndexOfAny``1(System.Collections.Generic.IEnumerable{``0},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndexOfAny&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int IndexOfAny&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="values">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndexOfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndicesOf&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; IndicesOf&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndicesOf``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndicesOfAny&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; IndicesOfAny&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource[] values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="values" Type="TSource[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="values">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndicesOfAny``1(System.Collections.Generic.IEnumerable{``0},``0[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="IndicesOfAny&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; IndicesOfAny&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="values">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.IndicesOfAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="InitialSegments&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; InitialSegments&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence for which to return the initial segments.
        </param>
          <summary>
          Creates a 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />
          containing all leading segments of <paramref name="self" />,
          shortest first.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.InitialSegments``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Insert&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Insert&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Insert``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Insert&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Insert&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value, Func&lt;TSource,TSource,int&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Insert``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersperse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersperse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Intersperse``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersperse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersperse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; between);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" RefType="this" />
          <Parameter Name="between" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="between">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Intersperse``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Or">
        <MemberSignature Language="C#" Value="public static bool Or (this System.Collections.Generic.IEnumerable&lt;bool&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.Boolean&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Or(System.Collections.Generic.IEnumerable{System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByNatural&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; OrderByNatural&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,string&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.OrderByNatural``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Partition&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Partition&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to partition into elements which match
          <paramref name="predicate" /> and those which do not.
        </param>
          <param name="predicate">
          A <see cref="T:System.Func{TSource,System.Boolean}" /> which is used
          to partition <paramref name="self" /> into the set of elements for
          which <paramref name="predicate" /> returns <see langword="true" />
          and those for which <paramref name="predicate" /> returns
          <see langword="false" />.
        </param>
          <summary>
          Partitions <paramref name="self" /> into two sequences, those which
          contain elements satisfying <paramref name="predicate" /> and those
          which do not.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="PathCombine">
        <MemberSignature Language="C#" Value="public static string PathCombine (this System.Collections.Generic.IEnumerable&lt;string&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the values to combine into a path name.
        </param>
          <summary>
          Creates a path string by concatenating the elements of
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.PathCombine(System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="RemoveFirstOccurrence&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; RemoveFirstOccurrence&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence from which to remove the first element
          equal to <paramref name="value" />.
        </param>
          <param name="value">
          A <typeparamref name="TSource" /> which is the value
          to remove once from <paramref name="self" />.
        </param>
          <summary>
          Removes the first occurrence of
          <paramref name="value" /> from the sequence <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.RemoveFirstOccurrence``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="RemoveFirstOccurrence&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; RemoveFirstOccurrence&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence from which to remove the first element
          equal to <paramref name="value" />.
        </param>
          <param name="value">
          A <typeparamref name="TSource" /> which is the value
          to remove once from <paramref name="self" />.
        </param>
          <param name="comparer">
          A <see cref="T:System.Collections.Generic.IEqualityComparer{TSource}" />
          to use when comparing elements from <paramref name="self" />
          to <paramref name="value" />. If <see langword="null" /> then
          <see cref="P:System.Collections.Generic.EqualityComparer{TSource}.Default" />
          is used.
        </param>
          <summary>
          Removes the first occurrence of
          <paramref name="value" /> from the sequence <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.RemoveFirstOccurrence``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="RemoveFirstOccurrences&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; RemoveFirstOccurrences&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence from which to remove the leading elements
          equal to <paramref name="value" /> from.
        </param>
          <param name="value">
          A <typeparamref name="TSource" /> which is the value
          to remove from the start of <paramref name="self" />.
        </param>
          <param name="count">
          A <see cref="T:System.Int32" /> containing the number
          of <paramref name="value" /> elements to remove from
          <paramref name="self" />.
        </param>
          <summary>
          Removes the first <paramref name="count" /> occurrences of
          <paramref name="value" /> from the sequence <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.RemoveFirstOccurrences``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="RemoveFirstOccurrences&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; RemoveFirstOccurrences&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TSource value, int count, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="count" Type="System.Int32" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence from which to remove the leading elements
          equal to <paramref name="value" /> from.
        </param>
          <param name="value">
          A <typeparamref name="TSource" /> which is the value
          to remove from the start of <paramref name="self" />.
        </param>
          <param name="count">
          A <see cref="T:System.Int32" /> containing the number
          of <paramref name="value" /> elements to remove from
          <paramref name="self" />.
        </param>
          <param name="comparer">
          A <see cref="T:System.Collections.Generic.IEqualityComparer{TSource}" />
          to use when comparing elements from <paramref name="self" />
          and <paramref name="value" />. If <see langword="null" /> then
          <see cref="P:System.Collections.Generic.EqualityComparer{TSource}.Default" />
          is used.
        </param>
          <summary>
          Removes the first <paramref name="count" /> occurrences of
          <paramref name="value" /> from the sequence <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.RemoveFirstOccurrences``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Repeat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, int number);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="number" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements in <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to repeat.
        </param>
          <param name="number">
          The number of times to repeat <paramref name="self" />.
        </param>
          <summary>
          Repeats the sequence <paramref name="self" /> for
          <paramref name="number" /> repetitions.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectAggregated&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;TAccumulate,System.Collections.Generic.List&lt;TResult&gt;&gt; SelectAggregated&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,Cadenza.Tuple&lt;TAccumulate,TResult&gt;&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;TAccumulate,System.Collections.Generic.List&lt;TResult&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,Cadenza.Tuple&lt;TAccumulate,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <typeparam name="TAccumulate">
          The type of the accumulator value.
        </typeparam>
          <typeparam name="TResult">
          The type of the return value.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to return the values of successive
          <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          and
          <see cref="M:Cadenza.Collections.EnumerableCoda.AggregateReverse``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          calls from.
        </param>
          <param name="seed">
          The first <typeparamref name="TAccumulate" /> value to pass to
          <paramref name="func" />.
        </param>
          <param name="func">
          A
          <see cref="T:System.Func{TAccumulate,TSource,Cadenza.Tuple{TAccumulate,TResult}}" />
          which is applied against each element within <paramref name="self" />
          and the current <paramref name="TAccumulate" />
          value (initially using <paramref name="seed" />), generating the
          next accumulated value and the (partial) result value.
        </param>
          <summary>
          Applies <paramref name="func" /> to each element within
          <paramref name="self" />, returning the final
          value of the accumulator and the list of intermediate values.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectAggregated``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,Cadenza.Tuple{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectBreadthFirst&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectBreadthFirst&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root nodes and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the elements to perform a breadth-first traversal on.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of <paramref name="root" />
          and all intermediate non-leaf nodes.
        </param>
          <summary>
          Traverse a sequence of nodes in a breadth-first fashion, converting each
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectBreadthFirst``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectDepthFirst&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectDepthFirst&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root nodes and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the elements to perform a depth-first traversal on.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of an element in
          <paramref name="self" /> (and grand-children, and
          great-grandchildren, and...).
        </param>
          <summary>
          Traverse a sequence of nodes in a depth-first fashion, converting each
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectDepthFirst``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectFromEach&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectFromEach&lt;T1,T2,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2, Func&lt;T1,T2,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;T1,T2,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <typeparam name="TResult">
          The type of value returned by <paramref name="selector" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <param name="selector">
          A <see cref="T:System.Func{T1,T2,TResult}" /> which is used to
          transform the corresponding elements from lists
          <paramref name="self" /> and <paramref name="source2" />
          into the returned value.
        </param>
          <summary>
          Projects each corresponding element from multiple sequences into a 
          new form.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectFromEach``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectFromEach&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectFromEach&lt;T1,T2,T3,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2, System.Collections.Generic.IEnumerable&lt;T3&gt; source3, Func&lt;T1,T2,T3,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
          <Parameter Name="source3" Type="System.Collections.Generic.IEnumerable&lt;T3&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;T1,T2,T3,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <typeparam name="T3">
          The type of elements in the third list.
        </typeparam>
          <typeparam name="TResult">
          The type of value returned by <paramref name="selector" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <param name="source3">
          A <see cref="T:System.Collections.Generic.IEnumerable{T3}" />
          containing elements from the third list.
        </param>
          <param name="selector">
          A <see cref="T:System.Func{T1,T2,T3,TResult}" /> which is used to
          transform the corresponding elements from lists
          <paramref name="self" />, <paramref name="source2" />, and <paramref name="source3" />
          into the returned value.
        </param>
          <summary>
          Projects each corresponding element from multiple sequences into a 
          new form.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectFromEach``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectFromEach&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectFromEach&lt;T1,T2,T3,T4,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2, System.Collections.Generic.IEnumerable&lt;T3&gt; source3, System.Collections.Generic.IEnumerable&lt;T4&gt; source4, Func&lt;T1,T2,T3,T4,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
          <Parameter Name="source3" Type="System.Collections.Generic.IEnumerable&lt;T3&gt;" />
          <Parameter Name="source4" Type="System.Collections.Generic.IEnumerable&lt;T4&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <typeparam name="T3">
          The type of elements in the third list.
        </typeparam>
          <typeparam name="T4">
          The type of elements in the fourth list.
        </typeparam>
          <typeparam name="TResult">
          The type of value returned by <paramref name="selector" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <param name="source3">
          A <see cref="T:System.Collections.Generic.IEnumerable{T3}" />
          containing elements from the third list.
        </param>
          <param name="source4">
          A <see cref="T:System.Collections.Generic.IEnumerable{T4}" />
          containing elements from the fourth list.
        </param>
          <param name="selector">
          A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> which is used to
          transform the corresponding elements from lists
          <paramref name="self" />, <paramref name="source2" />, <paramref name="source3" />, and <paramref name="source4" />
          into the returned value.
        </param>
          <summary>
          Projects each corresponding element from multiple sequences into a 
          new form.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectFromEach``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectReverseAggregated&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;TAccumulate,System.Collections.Generic.List&lt;TResult&gt;&gt; SelectReverseAggregated&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,Cadenza.Tuple&lt;TAccumulate,TResult&gt;&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;TAccumulate,System.Collections.Generic.List&lt;TResult&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,Cadenza.Tuple&lt;TAccumulate,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <typeparam name="TAccumulate">
          The type of the accumulator value.
        </typeparam>
          <typeparam name="TResult">
          The type of the return value.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to return the values of successive
          <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          and
          <see cref="M:Cadenza.Collections.EnumerableCoda.AggregateReverse``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          calls from.
        </param>
          <param name="seed">
          The first <typeparamref name="TAccumulate" /> value to pass to
          <paramref name="func" />.
        </param>
          <param name="func">
          A
          <see cref="T:System.Func{TAccumulate,TSource,Cadenza.Tuple{TAccumulate,TResult}}" />
          which is applied against each element within <paramref name="self" />
          in reverse order and the current <paramref name="TAccumulate" />
          value (initially using <paramref name="seed" />), generating the
          next accumulated value and the (partial) result value.
        </param>
          <summary>
          Applies <paramref name="func" /> to each element within
          <paramref name="self" /> in reverse order, returning the final
          value of the accumulator and the list of intermediate values.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SelectReverseAggregated``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,Cadenza.Tuple{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceCompare&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int SequenceCompare&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; list);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="list" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to compare against <paramref name="list" />.
        </param>
          <param name="list">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to compare against <paramref name="self" />.
        </param>
          <summary>
          Compares the elements of two sequences by using the default
          comparer for their type.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceCompare&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int SequenceCompare&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; list, System.Collections.Generic.IComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="list" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to compare against <paramref name="list" />.
        </param>
          <param name="list">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to compare against <paramref name="self" />.
        </param>
          <param name="comparer">
          A <see cref="T:System.Collections.Generic.IComparer{TSource}" />
          which is used to compare elements from <paramref name="self" />
          and <paramref name="list" /> are to each other.  If
          <see langword="null" />, then
          <see cref="P:System.Collections.Generic.Comparer{TSource}.Default" />
          is used.
        </param>
          <summary>
          Compares the elements of two sequences by using a specified
          <see cref="T:System.Collections.Generic.IComparer{TSource}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SequenceCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Shuffle&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Shuffle&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove <paramref name="prefix" /> from.
        </param>
          <summary>
          Randomizes the ordering of items within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Shuffle``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Shuffle&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Shuffle&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Random random);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="random" Type="System.Random" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove <paramref name="prefix" /> from.
        </param>
          <param name="random">
          A <see cref="T:System.Random" /> instance to get random numbers from.
        </param>
          <summary>
          Randomizes the ordering of items within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipPrefix&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipPrefix&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; prefix);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="prefix" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove <paramref name="prefix" /> from.
        </param>
          <param name="prefix">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove from the start of
          <paramref name="self" />.
        </param>
          <summary>
          Skips over <paramref name="prefix" />, returning the elements following
          <paramref name="prefix" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SkipPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipPrefix&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipPrefix&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IEnumerable&lt;TSource&gt; prefix, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="prefix" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove <paramref name="prefix" /> from.
        </param>
          <param name="prefix">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to remove from the start of
          <paramref name="self" />.
        </param>
          <param name="comparer">
          A <see cref="T:System.Collections.Generic.IEqualityComparer{TSource}" />
          to use to compare elements between the <paramref name="self" />
          and <paramref name="prefix" /> sequences.  If <see langword="null" />
          then
          <see cref="P:System.Collections.Generic.EqualityComparer{TSource}.Default" />
          is used.
        </param>
          <summary>
          Skips over <paramref name="prefix" />, returning the elements following
          <paramref name="prefix" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SkipPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sort&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Sort&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource} " />
          containing the sequence to sort by the default comparer.
        </param>
          <summary>Sorts the elements in the sequence <paramref name="self" /> using the default comparer.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Sort``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sort&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Sort&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, System.Collections.Generic.IComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource} " />
          containing the sequence to sort by the default comparer.
        </param>
          <param name="comparer">
          A <see cref="T:System.Collections.Generic.IComparer{TSource} " />
          instance which is used to sort the elements within
          <paramref name="self" />.
          If <see langword="null" />, then
          <see cref="P:System.Collections.Generic.Comparer{TSource}.Default" />
          is used.
        </param>
          <summary>Sorts the elements in the sequence <paramref name="self" /> using the specified comparer.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sort&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Sort&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Comparison&lt;TSource&gt; comparison);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparison" Type="System.Comparison&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource} " />
          containing the sequence to sort by the default comparer.
        </param>
          <param name="comparison">
          A <see cref="T:System.Comparison{TSource} " />
          instance which is used to sort the elements within
          <paramref name="self" />.
        </param>
          <summary>Sorts the elements in the sequence <paramref name="self" /> using the specified comparer.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SortNatural">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; SortNatural (this System.Collections.Generic.IEnumerable&lt;string&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the elements to sort.
        </param>
          <summary>
          Returns a new 
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          which contains the elements within <paramref name="self" /> sorted 
          using the
          <see cref="F:Cadenza.NaturalStringComparer.Default" /> comparer.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SortNatural(System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Span&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Span&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to create a span of.
        </param>
          <param name="predicate">
          A <see cref="T:System.Func{TSource,System.Boolean}" /> which
          controls which elements from <paramref name="self" /> are present
          within the returned 
          <see cref="P:Cadenza.Tuple{System.Collections.Generic.IEnumerable{TSource},System.Collections.Generic.IEnumerable{TSource}}._1" />.
          sequence.
        </param>
          <summary>
          Creates a 
          <see cref="T:Cadenza.Tuple{System.Collections.Generic.IEnumerable{TSource},System.Collections.Generic.IEnumerable{TSource}}" />
          of the contiguous elements at the start of <paramref name="self" /> 
          which satisfy <paramref name="predicate" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Span``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SplitAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; SplitAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, int firstLength);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="firstLength" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to split.
        </param>
          <param name="firstLength">
          The number of elements to return in the first created sequence.
        </param>
          <summary>
          Splits <paramref name="self" /> at <paramref name="firstLength" />,
          creating a 
          <see cref="T:Cadenza.Tuple{System.Collections.Generic.IEnumerable{TSource},System.Collections.Generic.IEnumerable{TSource}}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Subsets&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Subsets&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence to create subsets from.
        </param>
          <summary>
          Creates all subsets of a given input sequence.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Subsets``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Subsets&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Subsets&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" /> containing the sequence to create subsets from.
        </param>
          <param name="predicate">
          A <see cref="T:System.Func{TSource,System.Boolean}" /> used to filter .
        </param>
          <summary>
          Creates all subsets that match <paramref name="predicate" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Subsets``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Tokens&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Tokens&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; accumulate, Func&lt;TAccumulate,Cadenza.Tuple&lt;TResult,TAccumulate&gt;&gt; resultSelector, Func&lt;TAccumulate,TSource,bool&gt;[] categories);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="accumulate" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,Cadenza.Tuple&lt;TResult,TAccumulate&gt;&gt;" />
          <Parameter Name="categories" Type="System.Func&lt;TAccumulate,TSource,System.Boolean&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of elements within <paramref name="self" />.
        </typeparam>
          <typeparam name="TAccumulate">
          The type of the accumulator value.
        </typeparam>
          <typeparam name="TResult">
          The type of the resulting sequence of values.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the values to aggregate and convert.
        </param>
          <param name="seed">
          The initial accumulator value.
        </param>
          <param name="accumulate">
          A <see cref="T:System.Func{TAccumulate,TSource,TAccumulate}" />
          which is used to accumulate values from <paramref name="self" />
          into one of the values returned.
        </param>
          <param name="resultSelector">
          A <see cref="T:System.Func{TAccumulate,Cadenza.Tuple{TResult,TAccumulate}}" />
          which is used to do two things: convert the accumulated value into a
          return value, and reset the accumulator.
          The <see cref="P:Cadenza.Tuple{TResult,TAccumulate}.Item1" /> property
          contains the value to return, while
          the <see cref="P:Cadenza.Tuple{TResult,TAccumulate}.Item2" /> property
          contains the new accumulator seed value.
        </param>
          <param name="categories">
          A <see cref="T:System.Func{TAccumulate,TSource,System.Boolean}" />
          array which contains "categories." A "category" is how
          <c>Tokens</c> knows when to call <paramref name="accumulate" />
          or <paramref name="resultSelector" />.
          If a category returns <see langword="true" /> on an element
          from <paramref name="self" />, then
          <paramref name="accumulate" /> will be invoked; otherwise,
          <paramref name="resultSelector" /> is invoked.
        </param>
          <summary>
          A simple lexer to convert an
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          into a
          <see cref="T:System.Collections.Generic.IEnumerable{TResult}" />,
          where the resulting sequence may have a different number of elements
          than the source sequence.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Tokens``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,Cadenza.Tuple{``2,``1}},System.Func{``1,``0,System.Boolean}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToList&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;TSource&gt;&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;System.Collections.Generic.List&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />
          to convert into a 
          <see cref="T:System.Collections.Generic.List{System.Collections.Generic.List{TSource}}" /></param>
          <summary>
          Creates a 
          <see cref="T:System.Collections.Generic.List{System.Collections.Generic.List{TSource}}" />
          with the same ordering and values as <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToList``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToReadOnlyDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Collections.ReadOnlyDictionary&lt;TKey,TSource&gt; ToReadOnlyDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Collections.ReadOnlyDictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements in <paramref name="self" />.</typeparam>
          <typeparam name="TKey">
          The type of the key returned by <paramref name="keySelector" />.
        </typeparam>
          <param name="self">
          An
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          to create a 
          <see cref="T:Cadenza.Collections.ReadOnlyDictionary{TKey,TValue}" />
          from.
        </param>
          <param name="keySelector">
          A <see cref="T:System.Func{TSource,TKey}" /> used to extract a key 
          from each element in <paramref name="self" />.
        </param>
          <summary>
          Creates a 
          <see cref="T:Cadenza.Collections.ReadOnlyDictionary{TKey,TSource}" />
          from an
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          according to a specified key selector and value selector delegate.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToReadOnlyDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToReadOnlyDictionary&lt;TSource,TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Collections.ReadOnlyDictionary&lt;TKey,TValue&gt; ToReadOnlyDictionary&lt;TSource,TKey,TValue&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TValue&gt; valueSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Collections.ReadOnlyDictionary&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TValue&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements in <paramref name="self" />.</typeparam>
          <typeparam name="TKey">
          The type of the key returned by <paramref name="keySelector" />.
        </typeparam>
          <typeparam name="TValue">
          The type of the value returned by <paramref name="valueSelector" />.
        </typeparam>
          <param name="self">
          An
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          to create a 
          <see cref="T:Cadenza.Collections.ReadOnlyDictionary{TKey,TValue}" />
          from.
        </param>
          <param name="keySelector">
          A <see cref="T:System.Func{TSource,TKey}" /> used to extract a key 
          from each element in <paramref name="self" />.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TValue}" /> used to extract a 
          value from each element in <paramref name="self" />.
        </param>
          <summary>
          Creates a 
          <see cref="T:Cadenza.Collections.ReadOnlyDictionary{TKey,TValue}" />
          from an
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          according to a specified key selector and value selector delegate.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="ToTuple">
        <MemberSignature Language="C#" Value="public static object ToTuple (this System.Collections.IEnumerable self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.Collections.IEnumerable" /> containing the
          values to insert into a Tuple.
        </param>
          <summary>
          Creates a <c>Tuple</c> from a sequence.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToTuple(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToValueReader">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.TextValueReader ToValueReader (this System.Collections.Generic.IEnumerable&lt;string&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.TextValueReader</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing elements to read values from.
        </param>
          <summary>
          Creates a <see cref="T:Cadenza.IO.TextValueReader" />
          which will extract values from an 
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToValueReader(System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToValueReader&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.EnumerableValueReader&lt;TSource&gt; ToValueReader&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.EnumerableValueReader&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing elements to read values from.
        </param>
          <summary>
          Creates a <see cref="T:Cadenza.IO.EnumerableValueReader" />
          which will extract values from an 
          <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.ToValueReader``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TrailingSegments&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; TrailingSegments&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element in the sequence <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{TSource}" />
          containing the sequence for which to return the trailing segments.
        </param>
          <summary>
          Creates a 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />
          containing all final segments of <paramref name="self" />,
          longest first.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.TrailingSegments``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Transpose&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Transpose&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of element to return.
        </typeparam>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />
          containing rows and columns to transpose.
        </param>
          <summary>
          Transposes <paramref name="self" />, so that rows become columns and
          columns become rows in the returned 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TryGetFirst&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool TryGetFirst&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, out TSource first);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="first" Type="TSource&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements in <paramref name="self" />.</typeparam>
          <param name="self">
          An <see cref="T:System.Collections.Generic.IEnumerable{TSource}" /> 
          containing the sequence of elements to extract the first element from.
        </param>
          <param name="first">
          When this method returns, contains a <typeparamref name="TSource" /> 
          which contains either the first element within <paramref name="self" />
          (if the return value is <see langword="true" />), or will 
          contain <c>default(<typeparamref name="TSource" />)</c>.
        </param>
          <summary>Attempts to obtain the first element in the sequence.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TryGetFirst&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool TryGetFirst&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; self, Func&lt;TSource,bool&gt; predicate, out TSource first);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
          <Parameter Name="first" Type="TSource&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type of the elements in <paramref name="self" />.</typeparam>
          <param name="self">
          An <see cref="T:System.Collections.Generic.IEnumerable{TSource}" /> 
          containing the sequence of elements to extract the first element from.
        </param>
          <param name="predicate">
          A <see cref="T:System.Func{TSource,System.Boolean}" /> which is tested
          against each element within <paramref name="self" />.
        </param>
          <param name="first">
          When this method returns, contains a <typeparamref name="TSource" /> 
          which contains either the first element for which 
          <paramref name="predicate" /> returned <see langword="true" />
          (if the return value is <see langword="true" />), or will 
          contain <c>default(<typeparamref name="TSource" />)</c>.
        </param>
          <summary>Attempts to obtain the first element in the sequence that satisfies the specified condition.</summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Unzip&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;&gt; Unzip&lt;T1,T2&gt; (this System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2&gt;&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of the first sequence to return.
        </typeparam>
          <typeparam name="T2">
          The type of the second sequence to return.
        </typeparam>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2}}" />
          to split up into separate lists.
        </param>
          <summary>
          Converts an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2}}" />
          into a tuple of lists, one for each 
          <see cref="T:Cadenza.Tuple{T1,T2}" />
          element.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Unzip``2(System.Collections.Generic.IEnumerable{Cadenza.Tuple{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Unzip&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;,System.Collections.Generic.IEnumerable&lt;T3&gt;&gt; Unzip&lt;T1,T2,T3&gt; (this System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3&gt;&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;,System.Collections.Generic.IEnumerable&lt;T3&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of the first sequence to return.
        </typeparam>
          <typeparam name="T2">
          The type of the second sequence to return.
        </typeparam>
          <typeparam name="T3">
          The type of the third sequence to return.
        </typeparam>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3}}" />
          to split up into separate lists.
        </param>
          <summary>
          Converts an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3}}" />
          into a tuple of lists, one for each 
          <see cref="T:Cadenza.Tuple{T1,T2,T3}" />
          element.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Unzip``3(System.Collections.Generic.IEnumerable{Cadenza.Tuple{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Unzip&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;,System.Collections.Generic.IEnumerable&lt;T3&gt;,System.Collections.Generic.IEnumerable&lt;T4&gt;&gt; Unzip&lt;T1,T2,T3,T4&gt; (this System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3,T4&gt;&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;System.Collections.Generic.IEnumerable&lt;T1&gt;,System.Collections.Generic.IEnumerable&lt;T2&gt;,System.Collections.Generic.IEnumerable&lt;T3&gt;,System.Collections.Generic.IEnumerable&lt;T4&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3,T4&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of the first sequence to return.
        </typeparam>
          <typeparam name="T2">
          The type of the second sequence to return.
        </typeparam>
          <typeparam name="T3">
          The type of the third sequence to return.
        </typeparam>
          <typeparam name="T4">
          The type of the fourth sequence to return.
        </typeparam>
          <param name="self">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3,T4}}" />
          to split up into separate lists.
        </param>
          <summary>
          Converts an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3,T4}}" />
          into a tuple of lists, one for each 
          <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" />
          element.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Unzip``4(System.Collections.Generic.IEnumerable{Cadenza.Tuple{``0,``1,``2,``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Zip&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2&gt;&gt; Zip&lt;T1,T2&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <summary>
          Creates and returns an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2}}" />
          containing the corresponding items from 
          <paramref name="self" /> and <paramref name="source2" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Zip&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3&gt;&gt; Zip&lt;T1,T2,T3&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2, System.Collections.Generic.IEnumerable&lt;T3&gt; source3);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
          <Parameter Name="source3" Type="System.Collections.Generic.IEnumerable&lt;T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <typeparam name="T3">
          The type of elements in the third list.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <param name="source3">
          A <see cref="T:System.Collections.Generic.IEnumerable{T3}" />
          containing elements from the third list.
        </param>
          <summary>
          Creates and returns an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3}}" />
          containing the corresponding items from 
          <paramref name="self" />, <paramref name="source2" />, and <paramref name="source3" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Zip&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3,T4&gt;&gt; Zip&lt;T1,T2,T3,T4&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; self, System.Collections.Generic.IEnumerable&lt;T2&gt; source2, System.Collections.Generic.IEnumerable&lt;T3&gt; source3, System.Collections.Generic.IEnumerable&lt;T4&gt; source4);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Cadenza.Tuple&lt;T1,T2,T3,T4&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
          <Parameter Name="source3" Type="System.Collections.Generic.IEnumerable&lt;T3&gt;" />
          <Parameter Name="source4" Type="System.Collections.Generic.IEnumerable&lt;T4&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The type of elements in the first list.
        </typeparam>
          <typeparam name="T2">
          The type of elements in the second list.
        </typeparam>
          <typeparam name="T3">
          The type of elements in the third list.
        </typeparam>
          <typeparam name="T4">
          The type of elements in the fourth list.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.IEnumerable{T1}" />
          containing elements from the first list.
        </param>
          <param name="source2">
          A <see cref="T:System.Collections.Generic.IEnumerable{T2}" />
          containing elements from the second list.
        </param>
          <param name="source3">
          A <see cref="T:System.Collections.Generic.IEnumerable{T3}" />
          containing elements from the third list.
        </param>
          <param name="source4">
          A <see cref="T:System.Collections.Generic.IEnumerable{T4}" />
          containing elements from the fourth list.
        </param>
          <summary>
          Creates and returns an 
          <see cref="T:System.Collections.Generic.IEnumerable{Cadenza.Tuple{T1,T2,T3,T4}}" />
          containing the corresponding items from 
          <paramref name="self" />, <paramref name="source2" />, <paramref name="source3" />, and <paramref name="source4" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.EnumerableCoda" Member="M:Cadenza.Collections.EnumerableCoda.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.KeyValuePair`2" />
      </Targets>
      <Member MemberName="Aggregate&lt;TKey,TValue,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TKey,TValue,TResult&gt; (this System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; self, Func&lt;TKey,TValue,TResult&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TKey,TValue,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the key.</typeparam>
          <typeparam name="TValue">Type type of the value.</typeparam>
          <typeparam name="TResult">The type to accumulator value.</typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />.
          instance to convert into a <typeparamref name="TResult" />.
        </param>
          <param name="func">
          A <see cref="T:System.Func{TKey,TValue,TResult}" /> which is invoked
          to convert the 
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />
          into a <typeparamref name="TResult" />.
        </param>
          <summary>
          Applies an accumulator to a 
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />,
          converting the 
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />
          into a different value.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.KeyValuePairCoda" Member="M:Cadenza.Collections.KeyValuePairCoda.Aggregate``3(System.Collections.Generic.KeyValuePair{``0,``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.KeyValuePair`2" />
      </Targets>
      <Member MemberName="ToTuple&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Tuple&lt;TKey,TValue&gt; ToTuple&lt;TKey,TValue&gt; (this System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Tuple&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the key.</typeparam>
          <typeparam name="TValue">The type of the value.</typeparam>
          <param name="self">
          A 
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />.
          to convert into a
          <see cref="T:Cadenza.Tuple{TKey,TValue}" />.
        </param>
          <summary>
          Converts a 
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />
          into a
          <see cref="T:Cadenza.Tuple{TKey,TValue}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.KeyValuePairCoda" Member="M:Cadenza.Collections.KeyValuePairCoda.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.LinkedList`1" />
      </Targets>
      <Member MemberName="NodeAt&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.LinkedListNode&lt;T&gt; NodeAt&lt;T&gt; (this System.Collections.Generic.LinkedList&lt;T&gt; self, int index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.LinkedListNode&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.LinkedList&lt;T&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">
          The type of the elements within <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.Collections.Generic.LinkedList{T}" />
          to get a
          <see cref="T:System.Collections.Generic.LinkedListNode{T}" /> from.
        </param>
          <param name="index">
          A <see cref="T:System.Int32" /> containing the zero-based index of the
          <see cref="T:System.Collections.Generic.LinkedListNode{T}" /> to
          retrieve.
        </param>
          <summary>
          Returns the
          <see cref="T:System.Collections.Generic.LinkedListNode{T}" />
          at the specified <paramref name="index" /> of the
          <see cref="T:System.Collections.Generic.LinkedList{T}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Collections.LinkedListCoda" Member="M:Cadenza.Collections.LinkedListCoda.NodeAt``1(System.Collections.Generic.LinkedList{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Compose&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Action Compose&lt;T&gt; (this Action&lt;T&gt; self, Func&lt;T&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The <see cref="T:System.Func{T}" /> return type, and <see cref="T:System.Action{T}" /> argument type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``1(System.Action{``0},System.Func{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T1&gt; Compose&lt;T1,T2&gt; (this Action&lt;T2&gt; self, Func&lt;T1,T2&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T1&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T2&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            The <see cref="T:System.Func{T1,T2}" /> return type, and <see cref="T:System.Action{T2}" /> argument type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T2}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T1}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``2(System.Action{``1},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Compose&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Compose&lt;T,TResult&gt; (this Func&lt;T,TResult&gt; self, Func&lt;T&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T,TResult&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The <see cref="T:System.Func{T}" /> return type, and <see cref="T:System.Func{T,TResult}" /> argument type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T,TResult}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``2(System.Func{``0,``1},System.Func{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T1,T2&gt; Compose&lt;T1,T2,T3&gt; (this Action&lt;T3&gt; self, Func&lt;T1,T2,T3&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T1,T2&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T3&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            The <see cref="T:System.Func{T1,T2,T3}" /> return type, and <see cref="T:System.Action{T3}" /> argument type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T3}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T1,T2}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``3(System.Action{``2},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,TResult&gt; Compose&lt;T1,T2,TResult&gt; (this Func&lt;T2,TResult&gt; self, Func&lt;T1,T2&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T2,TResult&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            The <see cref="T:System.Func{T1,T2}" /> return type, and <see cref="T:System.Func{T2,TResult}" /> argument type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T2,TResult}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``3(System.Func{``1,``2},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T1,T2,T3&gt; Compose&lt;T1,T2,T3,T4&gt; (this Action&lt;T4&gt; self, Func&lt;T1,T2,T3,T4&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T1,T2,T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T4&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3,T4&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            The <see cref="T:System.Func{T1,T2,T3,T4}" /> return type, and <see cref="T:System.Action{T4}" /> argument type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T4}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3,T4}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T1,T2,T3}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``4(System.Action{``3},System.Func{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,TResult&gt; Compose&lt;T1,T2,T3,TResult&gt; (this Func&lt;T3,TResult&gt; self, Func&lt;T1,T2,T3&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,T2,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T3,TResult&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            The <see cref="T:System.Func{T1,T2,T3}" /> return type, and <see cref="T:System.Func{T3,TResult}" /> argument type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T3,TResult}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,T2,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``4(System.Func{``2,``3},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3,T4,T5&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T1,T2,T3,T4&gt; Compose&lt;T1,T2,T3,T4,T5&gt; (this Action&lt;T5&gt; self, Func&lt;T1,T2,T3,T4,T5&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T1,T2,T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T5&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3,T4,T5&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T5">
            The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> return type, and <see cref="T:System.Action{T5}" /> argument type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T5}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T1,T2,T3,T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``5(System.Action{``4},System.Func{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,TResult&gt; Compose&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T4,TResult&gt; self, Func&lt;T1,T2,T3,T4&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,T2,T3,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T4,TResult&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3,T4&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            The <see cref="T:System.Func{T1,T2,T3,T4}" /> return type, and <see cref="T:System.Func{T4,TResult}" /> argument type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T4,TResult}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3,T4}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,T2,T3,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``5(System.Func{``3,``4},System.Func{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Compose&lt;T1,T2,T3,T4,T5,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,T4,TResult&gt; Compose&lt;T1,T2,T3,T4,T5,TResult&gt; (this Func&lt;T5,TResult&gt; self, Func&lt;T1,T2,T3,T4,T5&gt; composer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,T2,T3,T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T5,TResult&gt;" RefType="this" />
          <Parameter Name="composer" Type="System.Func&lt;T1,T2,T3,T4,T5&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> parameter type.
            </typeparam>
          <typeparam name="T5">
            The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> return type, and <see cref="T:System.Func{T5,TResult}" /> argument type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T5,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T5,TResult}" /> to compose.
            </param>
          <param name="composer">
            The <see cref="T:System.Func{T1,T2,T3,T4,T5}" /> to compose with <paramref name="self" />.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Compose``6(System.Func{``4,``5},System.Func{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Curry&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T&gt; Curry&lt;T&gt; (this Action&lt;T&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``1(System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Curry&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T&gt; (this Action&lt;T&gt; self, T value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to curry.
            </param>
          <param name="value">
            A value of type <typeparamref name="T" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``1(System.Action{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Curry&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T&gt; (this Action&lt;T&gt; self, Cadenza.Tuple&lt;T&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``1(System.Action{``0},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Action&lt;T2&gt;&gt; Curry&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Action&lt;T2&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Action{T2}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Action{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2&gt; Curry&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Action{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Action{``0,``1},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Action{``0,``1},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2&gt; Curry&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Action{``0,``1},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Curry&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T,TResult&gt; Curry&lt;T,TResult&gt; (this Func&lt;T,TResult&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T,TResult&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T,TResult}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Curry&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T,TResult&gt; (this Func&lt;T,TResult&gt; self, T value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T,TResult&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
          <param name="value">
            A value of type <typeparamref name="T" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Func{``0,``1},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`2" />
      </Targets>
      <Member MemberName="Curry&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T,TResult&gt; (this Func&lt;T,TResult&gt; self, Cadenza.Tuple&lt;T&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Func{T,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``2(System.Func{``0,``1},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Func&lt;T2,Action&lt;T3&gt;&gt;&gt; Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Func&lt;T2,System.Action&lt;T3&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Action{T3}}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2,T3&gt; Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2,T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2,T3}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T3&gt; Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T3}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, T1 value1, T2 value2, T3 value3);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},``0,``1,``2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, Cadenza.Tuple&lt;T1,T2,T3&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T3&gt; Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T3}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2,T3&gt; Curry&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2,T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2,T3}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Action{``0,``1,``2},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Func&lt;T2,TResult&gt;&gt; Curry&lt;T1,T2,TResult&gt; (this Func&lt;T1,T2,TResult&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Func&lt;T2,TResult&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,TResult&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Func{T2,TResult}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,TResult&gt; Curry&lt;T1,T2,TResult&gt; (this Func&lt;T1,T2,TResult&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Func{``0,``1,``2},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,TResult&gt; (this Func&lt;T1,T2,TResult&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Func{``0,``1,``2},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,TResult&gt; (this Func&lt;T1,T2,TResult&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Func{``0,``1,``2},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`3" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,TResult&gt; Curry&lt;T1,T2,TResult&gt; (this Func&lt;T1,T2,TResult&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``3(System.Func{``0,``1,``2},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Func&lt;T2,Func&lt;T3,Action&lt;T4&gt;&gt;&gt;&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Func&lt;T2,System.Func&lt;T3,System.Action&lt;T4&gt;&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Action{T4}}}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2,T3,T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2,T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2,T3,T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T3,T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T3,T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1, T2 value2, T3 value3);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1,``2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1, T2 value2, T3 value3, T4 value4);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="value4" Type="T4" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <param name="value4">
            A value of type <typeparamref name="T4" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, Cadenza.Tuple&lt;T1,T2,T3,T4&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3,T4&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, Cadenza.Tuple&lt;T1,T2,T3&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T3,T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T3,T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Action&lt;T2,T3,T4&gt; Curry&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Action&lt;T2,T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Action{T2,T3,T4}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Action{``0,``1,``2,``3},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Func&lt;T2,Func&lt;T3,TResult&gt;&gt;&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Func&lt;T2,System.Func&lt;T3,TResult&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,TResult}}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,T3,TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,T3,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,T3,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T3,TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T3,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T3,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, T1 value1, T2 value2, T3 value3);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},``0,``1,``2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, Cadenza.Tuple&lt;T1,T2,T3&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T3,TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T3,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T3,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`4" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,T3,TResult&gt; Curry&lt;T1,T2,T3,TResult&gt; (this Func&lt;T1,T2,T3,TResult&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,T3,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,T3,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``4(System.Func{``0,``1,``2,``3},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T1,Func&lt;T2,Func&lt;T3,Func&lt;T4,TResult&gt;&gt;&gt;&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T1,System.Func&lt;T2,System.Func&lt;T3,System.Func&lt;T4,TResult&gt;&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T1,System.Func{T2,System.Func{T3,System.Func{T4,TResult}}}}" /> for currying.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,T3,T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, T1 value1);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,T3,T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,T3,T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T3,T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, T1 value1, T2 value2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T3,T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T3,T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, T1 value1, T2 value2, T3 value3);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, T1 value1, T2 value2, T3 value3, T4 value4);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="value4" Type="T4" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="value1">
            A value of type <typeparamref name="T1" /> to fix.
            </param>
          <param name="value2">
            A value of type <typeparamref name="T2" /> to fix.
            </param>
          <param name="value3">
            A value of type <typeparamref name="T3" /> to fix.
            </param>
          <param name="value4">
            A value of type <typeparamref name="T4" /> to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, Cadenza.Tuple&lt;T1,T2,T3,T4&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3,T4&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, Cadenza.Tuple&lt;T1,T2,T3&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2,T3}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T3,T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, Cadenza.Tuple&lt;T1,T2&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T3,T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1,T2&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1,T2}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T3,T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Func`5" />
      </Targets>
      <Member MemberName="Curry&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Func&lt;T2,T3,T4,TResult&gt; Curry&lt;T1,T2,T3,T4,TResult&gt; (this Func&lt;T1,T2,T3,T4,TResult&gt; self, Cadenza.Tuple&lt;T1&gt; values);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Func&lt;T2,T3,T4,TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" RefType="this" />
          <Parameter Name="values" Type="Cadenza.Tuple&lt;T1&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> parameter type.
            </typeparam>
          <typeparam name="TResult">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> return type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> to curry.
            </param>
          <param name="values">
            A value of type <see cref="T:Cadenza.Tuple{T1}" />  which contains the values to fix.
            </param>
          <summary>
            Creates a <see cref="T:System.Func{T2,T3,T4,TResult}" /> delegate.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Curry``5(System.Func{``0,``1,``2,``3,``4},Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action" />
      </Targets>
      <Member MemberName="Timings">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings (this Action self, int runs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Action" RefType="this" />
          <Parameter Name="runs" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
            The <see cref="T:System.Action" /> to generate timings for.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings(System.Action,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action" />
      </Targets>
      <Member MemberName="Timings">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings (this Action self, int runs, int loopsPerRun);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Action" RefType="this" />
          <Parameter Name="runs" Type="System.Int32" />
          <Parameter Name="loopsPerRun" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
            The <see cref="T:System.Action" /> to generate timings for.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <param name="loopsPerRun">
            The number of times to execute <paramref name="self" /> for each
            <see cref="T:System.TimeSpan" /> value returned.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings(System.Action,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Timings&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T&gt; (this Action&lt;T&gt; self, T value, int runs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="runs" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to generate timings for.
            </param>
          <param name="value">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``1(System.Action{``0},``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`1" />
      </Targets>
      <Member MemberName="Timings&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T&gt; (this Action&lt;T&gt; self, T value, int runs, int loopsPerRun);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T&gt;" RefType="this" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="runs" Type="System.Int32" />
          <Parameter Name="loopsPerRun" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            A <see cref="T:System.Action{T}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T}" /> to generate timings for.
            </param>
          <param name="value">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <param name="loopsPerRun">
            The number of times to execute <paramref name="self" /> for each
            <see cref="T:System.TimeSpan" /> value returned.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``1(System.Action{``0},``0,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, T1 value1, T2 value2, int runs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="runs" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`2" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2&gt; (this Action&lt;T1,T2&gt; self, T1 value1, T2 value2, int runs, int loopsPerRun);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="runs" Type="System.Int32" />
          <Parameter Name="loopsPerRun" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <param name="loopsPerRun">
            The number of times to execute <paramref name="self" /> for each
            <see cref="T:System.TimeSpan" /> value returned.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``2(System.Action{``0,``1},``0,``1,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, T1 value1, T2 value2, T3 value3, int runs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="runs" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value3">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`3" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2,T3&gt; (this Action&lt;T1,T2,T3&gt; self, T1 value1, T2 value2, T3 value3, int runs, int loopsPerRun);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="runs" Type="System.Int32" />
          <Parameter Name="loopsPerRun" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value3">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <param name="loopsPerRun">
            The number of times to execute <paramref name="self" /> for each
            <see cref="T:System.TimeSpan" /> value returned.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``3(System.Action{``0,``1,``2},``0,``1,``2,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1, T2 value2, T3 value3, T4 value4, int runs);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="value4" Type="T4" />
          <Parameter Name="runs" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value3">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value4">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Action`4" />
      </Targets>
      <Member MemberName="Timings&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TimeSpan&gt; Timings&lt;T1,T2,T3,T4&gt; (this Action&lt;T1,T2,T3,T4&gt; self, T1 value1, T2 value2, T3 value3, T4 value4, int runs, int loopsPerRun);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.TimeSpan&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Action&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="value1" Type="T1" />
          <Parameter Name="value2" Type="T2" />
          <Parameter Name="value3" Type="T3" />
          <Parameter Name="value4" Type="T4" />
          <Parameter Name="runs" Type="System.Int32" />
          <Parameter Name="loopsPerRun" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T2">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T3">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <typeparam name="T4">
            A <see cref="T:System.Action{T1,T2,T3,T4}" /> parameter type.
            </typeparam>
          <param name="self">
            The <see cref="T:System.Action{T1,T2,T3,T4}" /> to generate timings for.
            </param>
          <param name="value1">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value2">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value3">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="value4">
            The *unknown* <paramref name="self" /> parameter value.
            </param>
          <param name="runs">
            The number of <see cref="T:System.TimeSpan" /> values to return.
            </param>
          <param name="loopsPerRun">
            The number of times to execute <paramref name="self" /> for each
            <see cref="T:System.TimeSpan" /> value returned.
            </param>
          <summary>
            Get timing information for delegate invocations.
            </summary>
        </Docs>
        <Link Type="Cadenza.DelegateCoda" Member="M:Cadenza.DelegateCoda.Timings``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int16" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this short value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int16" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int16" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int16Coda" Member="M:Cadenza.Int16Coda.IsEven(System.Int16)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int16" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this short value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int16" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int16" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int16Coda" Member="M:Cadenza.Int16Coda.IsOdd(System.Int16)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="DownTo">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; DownTo (this int self, int limit);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Int32" RefType="this" />
          <Parameter Name="limit" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
          An <see cref="T:System.Int32" /> containing the upper starting value.
        </param>
          <param name="limit">
          An <see cref="T:System.Int32" /> containing the lower ending value.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> down to
          <paramref name="limit" />, inclusive.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.DownTo(System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this int value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int32" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.IsEven(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this int value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int32" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.IsOdd(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="Step">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Step (this int self, int limit, int step);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Int32" RefType="this" />
          <Parameter Name="limit" Type="System.Int32" />
          <Parameter Name="step" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
          An <see cref="T:System.Int32" /> containing the lower starting value.
        </param>
          <param name="limit">
          An <see cref="T:System.Int32" /> containing the upper ending value.
        </param>
          <param name="step">
          An <see cref="T:System.In32" /> containing the value to increment
          by.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> up to
          <paramref name="limit" />, inclusive, incrementing by 
          <paramref name="step" /> between each value.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.Step(System.Int32,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="Times">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Times (this int self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          An <see cref="T:System.Int32" /> containing the positive upper limit.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values between <c>0</c> and 
          <paramref name="self" />, exclusive.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.Times(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="UpTo">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; UpTo (this int self, int limit);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Int32" RefType="this" />
          <Parameter Name="limit" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
          An <see cref="T:System.Int32" /> containing the lower starting value.
        </param>
          <param name="limit">
          An <see cref="T:System.Int32" /> containing the upper ending value.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />
          which will return the values from <paramref name="self" /> up to
          <paramref name="limit" />, inclusive.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int32Coda" Member="M:Cadenza.Int32Coda.UpTo(System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int64" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this long value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int64" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int64" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int64Coda" Member="M:Cadenza.Int64Coda.IsEven(System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int64" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this long value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int64" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.Int64" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.Int64Coda" Member="M:Cadenza.Int64Coda.IsOdd(System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="WithSystemConverter">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.StreamConverter WithSystemConverter (this System.IO.Stream self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.StreamConverter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.Stream" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.IO.StreamCoda" Member="M:Cadenza.IO.StreamCoda.WithSystemConverter(System.IO.Stream)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.Stream" />
      </Targets>
      <Member MemberName="WriteTo">
        <MemberSignature Language="C#" Value="public static void WriteTo (this System.IO.Stream self, System.IO.Stream destination);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.Stream" RefType="this" />
          <Parameter Name="destination" Type="System.IO.Stream" />
        </Parameters>
        <Docs>
          <param name="self">To be added.</param>
          <param name="destination">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.IO.StreamCoda" Member="M:Cadenza.IO.StreamCoda.WriteTo(System.IO.Stream,System.IO.Stream)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.IO.StreamConverter" />
      </Targets>
      <Member MemberName="Read&lt;TValue&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.StreamConverter Read&lt;TValue&gt; (this Cadenza.IO.StreamConverter self, out TValue value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.StreamConverter</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.IO.StreamConverter" RefType="this" />
          <Parameter Name="value" Type="TValue&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TValue">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.IO.StreamConverterCoda" Member="M:Cadenza.IO.StreamConverterCoda.Read``1(Cadenza.IO.StreamConverter,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.IO.StreamConverter" />
      </Targets>
      <Member MemberName="Write&lt;TValue&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.StreamConverter Write&lt;TValue&gt; (this Cadenza.IO.StreamConverter self, TValue value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.StreamConverter</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.IO.StreamConverter" RefType="this" />
          <Parameter Name="value" Type="TValue" />
        </Parameters>
        <Docs>
          <typeparam name="TValue">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.IO.StreamConverterCoda" Member="M:Cadenza.IO.StreamConverterCoda.Write``1(Cadenza.IO.StreamConverter,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Lines">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Lines (this System.IO.TextReader self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to read lines from.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all lines of text from <paramref name="self" /> 
          while <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Lines(System.IO.TextReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Lines">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Lines (this System.IO.TextReader self, Cadenza.IO.TextReaderCodaOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
          <Parameter Name="options" Type="Cadenza.IO.TextReaderCodaOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to read lines from.
        </param>
          <param name="options">
          A <see cref="T:Cadenza.IO.TextReaderCodaOptions" /> controlling
          method execution.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all lines of text from <paramref name="self" />
          while optionally <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Lines(System.IO.TextReader,Cadenza.IO.TextReaderCodaOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Tokens">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Tokens (this System.IO.TextReader self, Cadenza.IO.TextReaderCodaOptions options, Func&lt;Nullable&lt;char&gt;,char,bool&gt;[] categories);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
          <Parameter Name="options" Type="Cadenza.IO.TextReaderCodaOptions" />
          <Parameter Name="categories" Type="System.Func&lt;System.Nullable&lt;System.Char&gt;,System.Char,System.Boolean&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to extract tokens from.
        </param>
          <param name="options">
          A <see cref="T:Cadenza.IO.TextReaderCodaOptions" /> controlling
          method execution.
        </param>
          <param name="categories">
          A
          <see cref="T:System.Func{System.Nullable{System.Char},System.Char,System.Boolean}" />
          array containing the different categories of characters that 
          determines what makes up a "token."  If the 
          <see cref="T:System.Nullable{System.Char}" /> parameter is 
          <see langword="null" />, then the <see cref="T:System.Char" /> is
          the first character within the token; otherwise, the
          <see cref="T:System.Nullable{System.Char}" /> parameter contains the
          character preceding the <see cref="T:System.Char" />.
          The delegate should return <see langword="true" /> if the
          <see cref="T:System.Char" /> is a supported character; otherwise,
          <see langword="false" /> should be returned.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all words from <paramref name="self" />
          while optionally <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Tokens(System.IO.TextReader,Cadenza.IO.TextReaderCodaOptions,System.Func{System.Nullable{System.Char},System.Char,System.Boolean}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Tokens">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Tokens (this System.IO.TextReader self, Func&lt;Nullable&lt;char&gt;,char,bool&gt;[] categories);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
          <Parameter Name="categories" Type="System.Func&lt;System.Nullable&lt;System.Char&gt;,System.Char,System.Boolean&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to extract tokens from.
        </param>
          <param name="categories">
          A
          <see cref="T:System.Func{System.Nullable{System.Char},System.Char,System.Boolean}" />
          array containing the different categories of characters that 
          determines what makes up a "token."  If the 
          <see cref="T:System.Nullable{System.Char}" /> parameter is 
          <see langword="null" />, then the <see cref="T:System.Char" /> is
          the first character within the token; otherwise, the
          <see cref="T:System.Nullable{System.Char}" /> parameter contains the
          character preceding the <see cref="T:System.Char" />.
          The delegate should return <see langword="true" /> if the
          <see cref="T:System.Char" /> is a supported character; otherwise,
          <see langword="false" /> should be returned.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all words from <paramref name="self" />
          while optionally <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Tokens(System.IO.TextReader,System.Func{System.Nullable{System.Char},System.Char,System.Boolean}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Words">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Words (this System.IO.TextReader self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to extract words from.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all words from <paramref name="self" />
          while <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Words(System.IO.TextReader)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.IO.TextReader" />
      </Targets>
      <Member MemberName="Words">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Words (this System.IO.TextReader self, Cadenza.IO.TextReaderCodaOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.IO.TextReader" RefType="this" />
          <Parameter Name="options" Type="Cadenza.IO.TextReaderCodaOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.IO.TextReader" /> to extract words from.
        </param>
          <param name="options">
          A <see cref="T:Cadenza.IO.TextReaderCodaOptions" /> controlling
          method execution.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all words from <paramref name="self" />
          while optionally <see cref="M:System.IO.TextReader.Close" />ing 
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.IO.TextReaderCoda" Member="M:Cadenza.IO.TextReaderCoda.Words(System.IO.TextReader,Cadenza.IO.TextReaderCodaOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.IO.ValueReader`1" />
      </Targets>
      <Member MemberName="Read&lt;TSource,TValue&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.IO.ValueReader&lt;TSource&gt; Read&lt;TSource,TValue&gt; (this Cadenza.IO.ValueReader&lt;TSource&gt; self, out TValue value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.IO.ValueReader&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.IO.ValueReader&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TValue&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TValue">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Cadenza.IO.ValueReaderCoda" Member="M:Cadenza.IO.ValueReaderCoda.Read``2(Cadenza.IO.ValueReader{``0},``1@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:TSource[][]" />
      </Targets>
      <Member MemberName="Rows&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Rows&lt;TSource&gt; (this TSource[][] self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource[][]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of elements within the jagged array.
        </typeparam>
          <param name="self">
          A jagged array of <typeparamref name="TSource" /> elements.
        </param>
          <summary>
          Converts a jagged array into an 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.JaggedArrayCoda" Member="M:Cadenza.JaggedArrayCoda.Rows``1(``0[][])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Maybe`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this Cadenza.Maybe&lt;TSource&gt; self, Func&lt;TSource,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Maybe&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of value in <paramref name="self" />.
        </typeparam>
          <typeparam name="TResult">
          The type of the resulting value.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Maybe{TSource}" /> containing a value to
          project.
        </param>
          <param name="selector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is
          used to convert <c><paramref name="self" />.Value</c> 
          into the value returned.
        </param>
          <summary>
          Projects a <see cref="T:Cadenza.Maybe{TSoruce}" /> into a
          <see cref="T:Cadenza.Maybe{TResult}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.MaybeCoda" Member="M:Cadenza.MaybeCoda.Select``2(Cadenza.Maybe{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Maybe`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this Cadenza.Maybe&lt;TSource&gt; self, Func&lt;TSource,Cadenza.Maybe&lt;TCollection&gt;&gt; selector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Maybe&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,Cadenza.Maybe&lt;TCollection&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of value in <paramref name="self" />.
        </typeparam>
          <typeparam name="TCollection">
          The type of the intermediate value within 
          <paramref name="selector" />.
        </typeparam>
          <typeparam name="TResult">
          The type of the resulting value.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Maybe{TSource}" /> containing a value to
          project.
        </param>
          <param name="selector">
          A <see cref="T:System.Func{TSource,Cadenza.Maybe{TCollection}}" />
          used to generate an intermediate value.
        </param>
          <param name="resultSelector">
          A <see cref="T:System.Func{TSource,TCollection,TResult}" /> which is
          used to convert <c><paramref name="self" />.Value</c> and
          <c><paramref name="selector" />(<paramref name="self" />).Value</c>
          into the value returned.
        </param>
          <summary>
          Projects a <see cref="T:Cadenza.Maybe{TSoruce}" /> and
          <see cref="T:Cadenza.Maybe{TCollection}" /> into a 
          <see cref="T:Cadenza.Maybe{TResult}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.MaybeCoda" Member="M:Cadenza.MaybeCoda.SelectMany``3(Cadenza.Maybe{``0},System.Func{``0,Cadenza.Maybe{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="Just&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;T&gt; Just&lt;T&gt; (this Nullable&lt;T&gt; self) where T : struct;" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Nullable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
          The type to convert into a <see cref="T:Cadenza.Maybe{T}" />.
        </typeparam>
          <param name="self">
          A value of type <see cref="T:System.Nullable{T}" /> to convert into a 
          <see cref="T:Cadenza.Maybe{T}" />.
        </param>
          <summary>
          Create a new <see cref="T:Cadenza.Maybe{T}" /> instance
          initialized to a specified value.  The returned value will not be 
          <see cref="F:Cadenza.Maybe{T}.Nothing" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.NullableCoda" Member="M:Cadenza.NullableCoda.Just``1(System.Nullable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Nullable`1" />
      </Targets>
      <Member MemberName="ToMaybe&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;T&gt; ToMaybe&lt;T&gt; (this Nullable&lt;T&gt; self) where T : struct;" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
              <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
              <BaseTypeName>System.ValueType</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Nullable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
          The type to convert into a <see cref="T:Cadenza.Maybe{T}" />.
        </typeparam>
          <param name="self">
          A value of type <see cref="T:System.Nullable{T}" /> to convert into a 
          <see cref="T:Cadenza.Maybe{T}" />.
        </param>
          <summary>
          Create a new <see cref="T:Cadenza.Maybe{T}" /> instance
          initialized to a specified value.  The returned value may be 
          <see cref="F:Cadenza.Maybe{T}.Nothing" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.NullableCoda" Member="M:Cadenza.NullableCoda.ToMaybe``1(System.Nullable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="Just&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;T&gt; Just&lt;T&gt; (this T self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
          The type to convert into a <see cref="T:Cadenza.Maybe{T}" />.
        </typeparam>
          <param name="self">
          A value of type <typeparamref name="T" /> to convert into a 
          <see cref="T:Cadenza.Maybe{T}" />.
        </param>
          <summary>
          Create a new <see cref="T:Cadenza.Maybe{T}" /> instance
          initialized to a specified value.  The returned value will not be 
          <see cref="F:Cadenza.Maybe{T}.Nothing" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.Just``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="Match&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Match&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,Cadenza.Maybe&lt;TResult&gt;&gt;[] matchers);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="matchers" Type="System.Func&lt;TSource,Cadenza.Maybe&lt;TResult&gt;&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TSource">The source type.</typeparam>
          <typeparam name="TResult">The result type.</typeparam>
          <param name="self">
          A value of type <typeparamref name="TSource" /> to convert to 
          <typeparamref name="TResult" />.
        </param>
          <param name="matchers">
          A <see cref="T:System.Func{TSource,Cadenza.Maybe{TResult}}" />
          array containing the conversion routines to try, in order, to
          convert <paramref name="self" /> into a 
          <typeparamref name="TResult" />.
        </param>
          <summary>
          Converts the <typeparamref name="TSource" /> instance 
          <paramref name="self" /> into a <typeparamref name="TResult" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.Match``2(``0,System.Func{``0,Cadenza.Maybe{``1}}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="ToMaybe&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Cadenza.Maybe&lt;T&gt; ToMaybe&lt;T&gt; (this T self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Cadenza.Maybe&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
          The type to convert into a <see cref="T:Cadenza.Maybe{T}" />.
        </typeparam>
          <param name="self">
          A value of type <typeparamref name="T" /> to convert into a 
          <see cref="T:Cadenza.Maybe{T}" />.
        </param>
          <summary>
          Create a new <see cref="T:Cadenza.Maybe{T}" /> instance
          initialized to a specified value.  The returned value may be 
          <see cref="F:Cadenza.Maybe{T}.Nothing" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.ToMaybe``1(``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="TraverseBreadthFirst&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; TraverseBreadthFirst&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root node and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          The root of a tree to traverse.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to 
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of <paramref name="root" />
          and all intermediate non-leaf nodes.
        </param>
          <summary>
          Traverse a tree in a breadth-first fashion, converting each 
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.TraverseBreadthFirst``2(``0,System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="TraverseBreadthFirstWithParent&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TSource,TResult&gt;&gt; TraverseBreadthFirstWithParent&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TSource,TResult&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root node and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          The root of a tree to traverse.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to 
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of <paramref name="root" />
          and all intermediate non-leaf nodes.
        </param>
          <summary>
          Traverse a tree in a breadth-first fashion, converting each 
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.TraverseBreadthFirstWithParent``2(``0,System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="TraverseDepthFirst&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; TraverseDepthFirst&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root node and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          The root of a tree to traverse.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to 
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of <paramref name="root" />
          and all intermediate non-leaf nodes.
        </param>
          <summary>
          Traverse a tree in a depth-first fashion, converting each 
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.TraverseDepthFirst``2(``0,System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="TraverseDepthFirstWithParent&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TSource,TResult&gt;&gt; TraverseDepthFirstWithParent&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,TResult&gt; valueSelector, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; childrenSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TSource,TResult&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="valueSelector" Type="System.Func&lt;TSource,TResult&gt;" />
          <Parameter Name="childrenSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The type of the root node and intermediate nodes of the tree.
        </typeparam>
          <typeparam name="TResult">
          The type of the object to return.
        </typeparam>
          <param name="self">
          The root of a tree to traverse.
        </param>
          <param name="valueSelector">
          A <see cref="T:System.Func{TSource,TResult}" /> which is used to 
          convert tree nodes into <typeparamref name="TResult" /> instances.
        </param>
          <param name="childrenSelector">
          A <see cref="T:System.Func{TSource,System.Collections.Generic.IEnumerable{TSource}}" />
          which returns the child nodes of <paramref name="root" />
          and all intermediate non-leaf nodes.
        </param>
          <summary>
          Traverse a tree in a depth-first fashion, converting each 
          encountered node.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.TraverseDepthFirstWithParent``2(``0,System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="With&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult With&lt;TSource,TResult&gt; (this TSource self, Func&lt;TSource,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">The type to operate on.</typeparam>
          <typeparam name="TResult">The type to return.</typeparam>
          <param name="self">
          A <typeparamref name="TSource" /> containing the value to manipulate.
          This value may be <see langword="null" /> (unlike most other
          extension methods).
        </param>
          <param name="selector">
          A <see cref="T:System.Func{TSource,TResult}" /> which will be
          invoked with <paramref name="self" /> as a parameter.
        </param>
          <summary>
          Supports chaining otherwise temporary values.
        </summary>
        </Docs>
        <Link Type="Cadenza.ObjectCoda" Member="M:Cadenza.ObjectCoda.With``2(``0,System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:TSource[,]" />
      </Targets>
      <Member MemberName="Rows&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt; Rows&lt;TSource&gt; (this TSource[,] self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.IEnumerable&lt;TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="TSource[,]" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">
          The array element type.
        </typeparam>
          <param name="self">
          A rectangular array of <typeparamref name="TSource" /> elements.
        </param>
          <summary>
          Converts a rectangular array into an 
          <see cref="T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{TSource}}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.RectangularArrayCoda" Member="M:Cadenza.RectangularArrayCoda.Rows``1(``0[,])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ICustomAttributeProvider" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;TAttribute&gt;">
        <MemberSignature Language="C#" Value="public static TAttribute GetCustomAttribute&lt;TAttribute&gt; (this System.Reflection.ICustomAttributeProvider self) where TAttribute : Attribute;" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAttribute</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TAttribute">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Reflection.ICustomAttributeProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TAttribute">The type of the custom attribute to return.</typeparam>
          <param name="self">
          A <see cref="T:System.Reflection.ICustomAttributeProvider" />
          from which to retrieve a custom attribute of type 
          <typeparamref name="TAttribute" />.
        </param>
          <summary>
          Retrieves a custom attribute of type 
          <typeparamref name="TAttribute" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Reflection.CustomAttributeProviderCoda" Member="M:Cadenza.Reflection.CustomAttributeProviderCoda.GetCustomAttribute``1(System.Reflection.ICustomAttributeProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ICustomAttributeProvider" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;TAttribute&gt;">
        <MemberSignature Language="C#" Value="public static TAttribute[] GetCustomAttributes&lt;TAttribute&gt; (this System.Reflection.ICustomAttributeProvider self) where TAttribute : Attribute;" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAttribute[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TAttribute">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Reflection.ICustomAttributeProvider" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TAttribute">The type of the custom attribute to return.</typeparam>
          <param name="self">
          A <see cref="T:System.Reflection.ICustomAttributeProvider" />
          from which to retrieve custom attributes of type 
          <typeparamref name="TAttribute" />.
        </param>
          <summary>
          Retrieves all custom attributes of type 
          <typeparamref name="TAttribute" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.Reflection.CustomAttributeProviderCoda" Member="M:Cadenza.Reflection.CustomAttributeProviderCoda.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="CaptureNamedGroups">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;string,string&gt; CaptureNamedGroups (this string self, string regex);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;System.String,System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <summary>
          Create a <see cref="T:System.Linq.ILookup{System.String,System.String}" />
          containing all named groups within <paramref name="regex" /> and
          the associated captured values within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.CaptureNamedGroups(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="CaptureNamedGroups">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;string,string&gt; CaptureNamedGroups (this string self, string regex, System.Text.RegularExpressions.RegexOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;System.String,System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <param name="options">
          A <see cref="T:System.Text.RegularExpressions.RegexOptions" />
          containing options to control the regular expression.
        </param>
          <summary>
          Create a <see cref="T:System.Linq.ILookup{System.String,System.String}" />
          containing all named groups within <paramref name="regex" /> and
          the associated captured values within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.CaptureNamedGroups(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Captures">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Captures (this string self, string regex);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing all captured values within <paramref name="self" /> that 
          match the regular expression <paramref name="regex" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Captures(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Captures">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Captures (this string self, string regex, System.Text.RegularExpressions.RegexOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <param name="options">
          A <see cref="T:System.Text.RegularExpressions.RegexOptions" />
          containing options to control the regular expression.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing all captured values within <paramref name="self" /> that 
          match the regular expression <paramref name="regex" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Captures(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="IsNullOrWhitespace">
        <MemberSignature Language="C#" Value="public static bool IsNullOrWhitespace (this string self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to check to see if it is
          <see langword="null" /> or contains only whitespace characters.
        </param>
          <summary>
          Indicates whether <paramref name="self" /> is a
          <see langword="null" /> or contains only whitespace.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.IsNullOrWhitespace(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Lines">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Lines (this string self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to read lines from.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all lines of text from <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Lines(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Matches">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Match&gt; Matches (this string self, string regex);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Match&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Match}" />
          containing all <see cref="T:System.Text.RegularExpressions.Match" />ed
          text within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Matches(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Matches">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Match&gt; Matches (this string self, string regex, System.Text.RegularExpressions.RegexOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Text.RegularExpressions.Match&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <param name="options">
          A <see cref="T:System.Text.RegularExpressions.RegexOptions" />
          containing options to control the regular expression.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.Match}" />
          containing all <see cref="T:System.Text.RegularExpressions.Match" />ed
          text within <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="MatchValues">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; MatchValues (this string self, string regex);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing all text within <paramref name="self" /> that matches
          <paramref name="regex" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.MatchValues(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="MatchValues">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; MatchValues (this string self, string regex, System.Text.RegularExpressions.RegexOptions options);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="regex" Type="System.String" />
          <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to apply a regular expression to.
        </param>
          <param name="regex">
          A <see cref="T:System.String" /> containing the regular expression
          to match <paramref name="self" /> against.
        </param>
          <param name="options">
          A <see cref="T:System.Text.RegularExpressions.RegexOptions" />
          containing options to control the regular expression.
        </param>
          <summary>
          Create a <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing all text within <paramref name="self" /> that matches
          <paramref name="regex" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.MatchValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Remove">
        <MemberSignature Language="C#" Value="public static string Remove (this string self, string[] targets);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="targets" Type="System.String[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to remove all occurrences of all
          elements within <paramref name="targets" />.
        </param>
          <param name="targets">
          A <see cref="T:System.String" /> array containing the strings to
          remove from <paramref name="self " />.
        </param>
          <summary>
          Deletes all strings within <paramref name="targets" /> from
          <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Remove(System.String,System.String[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Slice">
        <MemberSignature Language="C#" Value="public static string Slice (this string self, int start, int end);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="start" Type="System.Int32" />
          <Parameter Name="end" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> containing the string to 
          substring.
        </param>
          <param name="start">
          A <see cref="T:System.Int32" /> containing the start index of the
          new <see cref="T:System.String" /> to create.
        </param>
          <param name="end">
          A <see cref="T:System.Int32" /> containing the end index of the
          new <see cref="T:System.String" /> to create.
        </param>
          <summary>
          Creates a new <see cref="T:System.String" /> of 
          <paramref name="self" /> using indexes of the start and end
          position.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Slice(System.String,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="ToEnum&lt;TEnum&gt;">
        <MemberSignature Language="C#" Value="public static TEnum ToEnum&lt;TEnum&gt; (this string self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TEnum</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TEnum" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TEnum">
          An enumeration type containing the member stored in 
          <paramref name="self" />.
        </typeparam>
          <param name="self">
          A <see cref="T:System.String" /> containing an enumeration value to
          convert into that enumeration value.
        </param>
          <summary>
          Converts a <see cref="T:System.String" /> into an enumeration value
          of type <typeparamref name="TEnum" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.ToEnum``1(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Tokens">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Tokens (this string self, Func&lt;Nullable&lt;char&gt;,char,bool&gt;[] categories);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="categories" Type="System.Func&lt;System.Nullable&lt;System.Char&gt;,System.Char,System.Boolean&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to extract tokens from.
        </param>
          <param name="categories">
          A
					<see cref="T:System.Func{System.Nullable{System.Char},System.Char,System.Boolean}" />
					array containing the different categories of characters that 
					determines what makes up a "token."  If the 
					<see cref="T:System.Nullable{System.Char}" /> parameter is 
					<see langword="null" />, then the <see cref="T:System.Char" /> is
					the first character within the token; otherwise, the
					<see cref="T:System.Nullable{System.Char}" /> parameter contains the
					character preceding the <see cref="T:System.Char" />.
					The delegate should return <see langword="true" /> if the
					<see cref="T:System.Char" /> is a supported character; otherwise,
					<see langword="false" /> should be returned.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all tokens from <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Tokens(System.String,System.Func{System.Nullable{System.Char},System.Char,System.Boolean}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Words">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; Words (this string self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to extract words from.
        </param>
          <summary>
          Creates an
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          which will return all words from <paramref name="self" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.Words(System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="WrappedLines">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; WrappedLines (this string self, System.Collections.Generic.IEnumerable&lt;int&gt; widths);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="widths" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to split into segments no longer
          than lenghts in the <paramref name="widths" /> sequence.
        </param>
          <param name="widths">
          A
          <see cref="T:System.Collections.Generic.IEnumerable{System.String}" />
          containing the maximum lengths
          to use for corresponding returned segments.  The last value in this
          array is used for all remaining segments.
        </param>
          <summary>
          Splits a string into line segments with a maximum length constrained
          by <paramref name="widths" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.WrappedLines(System.String,System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="WrappedLines">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; WrappedLines (this string self, int[] widths);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.String" RefType="this" />
          <Parameter Name="widths" Type="System.Int32[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.String" /> to split into segments no longer
          than lenghts in the <paramref name="widths" /> sequence.
        </param>
          <param name="widths">
          A <see cref="T:System.Int32" /> array containing the maximum lengths
          to use for corresponding returned segments.  The last value in this
          array is used for all remaining segments.
        </param>
          <summary>
          Splits a string into line segments with a maximum length constrained
          by <paramref name="widths" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.StringCoda" Member="M:Cadenza.StringCoda.WrappedLines(System.String,System.Int32[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;T,TResult&gt; (this Cadenza.Tuple&lt;T&gt; self, Func&lt;T,TResult&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;T,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The first value type.
            </typeparam>
          <typeparam name="TResult">
            The return value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T}" /> to aggregate the values of.
            </param>
          <param name="func">
            A <see cref="T:System.Func{T,TResult}" /> which will be invoked, providing the values
            <see cref="P:Cadenza.Tuple`1.Item1" />
            to <paramref name="func" /> and
            returning the value returned by <paramref name="func" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T}" /> into a <typeparamref name="TResult" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Aggregate``2(Cadenza.Tuple{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`2" />
      </Targets>
      <Member MemberName="Aggregate&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;T1,T2,TResult&gt; (this Cadenza.Tuple&lt;T1,T2&gt; self, Func&lt;T1,T2,TResult&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;T1,T2,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <typeparam name="TResult">
            The return value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2}" /> to aggregate the values of.
            </param>
          <param name="func">
            A <see cref="T:System.Func{T1,T2,TResult}" /> which will be invoked, providing the values
            <see cref="P:Cadenza.Tuple`2.Item1" />, <see cref="P:Cadenza.Tuple`2.Item2" />
            to <paramref name="func" /> and
            returning the value returned by <paramref name="func" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2}" /> into a <typeparamref name="TResult" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Aggregate``3(Cadenza.Tuple{``0,``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`3" />
      </Targets>
      <Member MemberName="Aggregate&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;T1,T2,T3,TResult&gt; (this Cadenza.Tuple&lt;T1,T2,T3&gt; self, Func&lt;T1,T2,T3,TResult&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;T1,T2,T3,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <typeparam name="T3">
            The third value type.
            </typeparam>
          <typeparam name="TResult">
            The return value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> to aggregate the values of.
            </param>
          <param name="func">
            A <see cref="T:System.Func{T1,T2,T3,TResult}" /> which will be invoked, providing the values
            <see cref="P:Cadenza.Tuple`3.Item1" />, <see cref="P:Cadenza.Tuple`3.Item2" />, <see cref="P:Cadenza.Tuple`3.Item3" />
            to <paramref name="func" /> and
            returning the value returned by <paramref name="func" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> into a <typeparamref name="TResult" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Aggregate``4(Cadenza.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`4" />
      </Targets>
      <Member MemberName="Aggregate&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;T1,T2,T3,T4,TResult&gt; (this Cadenza.Tuple&lt;T1,T2,T3,T4&gt; self, Func&lt;T1,T2,T3,T4,TResult&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <typeparam name="T3">
            The third value type.
            </typeparam>
          <typeparam name="T4">
            The fourth value type.
            </typeparam>
          <typeparam name="TResult">
            The return value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> to aggregate the values of.
            </param>
          <param name="func">
            A <see cref="T:System.Func{T1,T2,T3,T4,TResult}" /> which will be invoked, providing the values
            <see cref="P:Cadenza.Tuple`4.Item1" />, <see cref="P:Cadenza.Tuple`4.Item2" />, <see cref="P:Cadenza.Tuple`4.Item3" />, <see cref="P:Cadenza.Tuple`4.Item4" />
            to <paramref name="func" /> and
            returning the value returned by <paramref name="func" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> into a <typeparamref name="TResult" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Aggregate``5(Cadenza.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`1" />
      </Targets>
      <Member MemberName="Match&lt;T,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Match&lt;T,TResult&gt; (this Cadenza.Tuple&lt;T&gt; self, Func&lt;T,Cadenza.Maybe&lt;TResult&gt;&gt;[] matchers);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T&gt;" RefType="this" />
          <Parameter Name="matchers" Type="System.Func&lt;T,Cadenza.Maybe&lt;TResult&gt;&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="T">
          The first value type.
        </typeparam>
          <typeparam name="TResult">
          The return value type.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Tuple{T}" /> to match against.
        </param>
          <param name="matchers">
          A <see cref="T:System.Func{T,Cadenza.Maybe{TResult}}" />
          array containing the conversion routines to use to convert 
          the current <see cref="T:Cadenza.Tuple{T}" /> instance into a 
          <typeparamref name="TResult" /> value.
        </param>
          <summary>
          Converts the current <see cref="T:Cadenza.Tuple{T}" /> instance into a <typeparamref name="TResult" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Match``2(Cadenza.Tuple{``0},System.Func{``0,Cadenza.Maybe{``1}}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`2" />
      </Targets>
      <Member MemberName="Match&lt;T1,T2,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Match&lt;T1,T2,TResult&gt; (this Cadenza.Tuple&lt;T1,T2&gt; self, Func&lt;T1,T2,Cadenza.Maybe&lt;TResult&gt;&gt;[] matchers);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="matchers" Type="System.Func&lt;T1,T2,Cadenza.Maybe&lt;TResult&gt;&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The first value type.
        </typeparam>
          <typeparam name="T2">
          The second value type.
        </typeparam>
          <typeparam name="TResult">
          The return value type.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Tuple{T1,T2}" /> to match against.
        </param>
          <param name="matchers">
          A <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
          array containing the conversion routines to use to convert 
          the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a 
          <typeparamref name="TResult" /> value.
        </param>
          <summary>
          Converts the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a <typeparamref name="TResult" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Match``3(Cadenza.Tuple{``0,``1},System.Func{``0,``1,Cadenza.Maybe{``2}}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`3" />
      </Targets>
      <Member MemberName="Match&lt;T1,T2,T3,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Match&lt;T1,T2,T3,TResult&gt; (this Cadenza.Tuple&lt;T1,T2,T3&gt; self, Func&lt;T1,T2,T3,Cadenza.Maybe&lt;TResult&gt;&gt;[] matchers);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="matchers" Type="System.Func&lt;T1,T2,T3,Cadenza.Maybe&lt;TResult&gt;&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The first value type.
        </typeparam>
          <typeparam name="T2">
          The second value type.
        </typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="TResult">
          The return value type.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Tuple{T1,T2}" /> to match against.
        </param>
          <param name="matchers">
          A <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
          array containing the conversion routines to use to convert 
          the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a 
          <typeparamref name="TResult" /> value.
        </param>
          <summary>
          Converts the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a <typeparamref name="TResult" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Match``4(Cadenza.Tuple{``0,``1,``2},System.Func{``0,``1,``2,Cadenza.Maybe{``3}}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`4" />
      </Targets>
      <Member MemberName="Match&lt;T1,T2,T3,T4,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Match&lt;T1,T2,T3,T4,TResult&gt; (this Cadenza.Tuple&lt;T1,T2,T3,T4&gt; self, Func&lt;T1,T2,T3,T4,Cadenza.Maybe&lt;TResult&gt;&gt;[] matchers);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="matchers" Type="System.Func&lt;T1,T2,T3,T4,Cadenza.Maybe&lt;TResult&gt;&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="T1">
          The first value type.
        </typeparam>
          <typeparam name="T2">
          The second value type.
        </typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="TResult">
          The return value type.
        </typeparam>
          <param name="self">
          A <see cref="T:Cadenza.Tuple{T1,T2}" /> to match against.
        </param>
          <param name="matchers">
          A <see cref="T:System.Func{T1,T2,Cadenza.Maybe{TResult}}" />
          array containing the conversion routines to use to convert 
          the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a 
          <typeparamref name="TResult" /> value.
        </param>
          <summary>
          Converts the current <see cref="T:Cadenza.Tuple{T1,T2}" /> instance into a <typeparamref name="TResult" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.Match``5(Cadenza.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,Cadenza.Maybe{``4}}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`1" />
      </Targets>
      <Member MemberName="ToEnumerable&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; ToEnumerable&lt;T&gt; (this Cadenza.Tuple&lt;T&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">
            The first value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.ToEnumerable``1(Cadenza.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`2" />
      </Targets>
      <Member MemberName="ToEnumerable&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; ToEnumerable&lt;T1,T2&gt; (this Cadenza.Tuple&lt;T1,T2&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.ToEnumerable``2(Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`3" />
      </Targets>
      <Member MemberName="ToEnumerable&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; ToEnumerable&lt;T1,T2,T3&gt; (this Cadenza.Tuple&lt;T1,T2,T3&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <typeparam name="T3">
            The third value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.ToEnumerable``3(Cadenza.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`4" />
      </Targets>
      <Member MemberName="ToEnumerable&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; ToEnumerable&lt;T1,T2,T3,T4&gt; (this Cadenza.Tuple&lt;T1,T2,T3,T4&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">
            The first value type.
            </typeparam>
          <typeparam name="T2">
            The second value type.
            </typeparam>
          <typeparam name="T3">
            The third value type.
            </typeparam>
          <typeparam name="T4">
            The fourth value type.
            </typeparam>
          <param name="self">
            A <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> to convert into an <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </param>
          <summary>
            Converts the <see cref="T:Cadenza.Tuple{T1,T2,T3,T4}" /> into a <see cref="T:System.Collections.Generic.IEnumerable{System.Object}" />.
            </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.ToEnumerable``4(Cadenza.Tuple{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Cadenza.Tuple`2" />
      </Targets>
      <Member MemberName="ToKeyValuePair&lt;TKey,TValue&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; ToKeyValuePair&lt;TKey,TValue&gt; (this Cadenza.Tuple&lt;TKey,TValue&gt; self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TValue" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Cadenza.Tuple&lt;TKey,TValue&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TKey">The type of the key.</typeparam>
          <typeparam name="TValue">The type of the value.</typeparam>
          <param name="self">
          A 
          <see cref="T:Cadenza.Tuple{TKey,TValue}" />
          to convert into a
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />.
        </param>
          <summary>
          Converts a 
          <see cref="T:Cadenza.Tuple{TKey,TValue}" />
          into a
          <see cref="T:System.Collections.Generic.KeyValuePair{TKey,TValue}" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TupleCoda" Member="M:Cadenza.TupleCoda.ToKeyValuePair``2(Cadenza.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsAssignableTo">
        <MemberSignature Language="C#" Value="public static bool IsAssignableTo (this Type self, Type type);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Type" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.Type" /> which is used to check that
          instances of type <paramref name="self" /> can be stored
          into references of type <paramref name="type" />.
        </param>
          <param name="type">
          A <see cref="T:System.Type" /> which is the type of the
          reference to store an instance of type <paramref name="self" />.
        </param>
          <summary>
          Determines whether an instance of <paramref name="self" /> can be
          stored in a reference of a type <paramref name="type" />.
        </summary>
        </Docs>
        <Link Type="Cadenza.TypeCoda" Member="M:Cadenza.TypeCoda.IsAssignableTo(System.Type,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsNullable">
        <MemberSignature Language="C#" Value="public static bool IsNullable (this Type self);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="self" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="self">
          A <see cref="T:System.Type" /> containing the type to check.
        </param>
          <summary>
          Gets a value indicating whether the type is a nullable type.
        </summary>
        </Docs>
        <Link Type="Cadenza.TypeCoda" Member="M:Cadenza.TypeCoda.IsNullable(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt16" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this ushort value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt16" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt16" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt16Coda" Member="M:Cadenza.UInt16Coda.IsEven(System.UInt16)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt16" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this ushort value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt16" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt16" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt16Coda" Member="M:Cadenza.UInt16Coda.IsOdd(System.UInt16)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt32" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this uint value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt32" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt32Coda" Member="M:Cadenza.UInt32Coda.IsEven(System.UInt32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt32" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this uint value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt32" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt32Coda" Member="M:Cadenza.UInt32Coda.IsOdd(System.UInt32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt64" />
      </Targets>
      <Member MemberName="IsEven">
        <MemberSignature Language="C#" Value="public static bool IsEven (this ulong value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt64" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt64" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an even number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt64Coda" Member="M:Cadenza.UInt64Coda.IsEven(System.UInt64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.UInt64" />
      </Targets>
      <Member MemberName="IsOdd">
        <MemberSignature Language="C#" Value="public static bool IsOdd (this ulong value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.UInt64" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">
          A <see cref="T:System.UInt64" /> containing the value to check.
        </param>
          <summary>
          Gets a value indicating whether <paramref name="value" /> is an odd number.
        </summary>
        </Docs>
        <Link Type="Cadenza.UInt64Coda" Member="M:Cadenza.UInt64Coda.IsOdd(System.UInt64)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
